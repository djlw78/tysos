// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-JOHN
// DateTime: 29/10/2017 16:05:42
// UserName: jncro
// Input file <typ.y - 29/10/2017 16:05:41>

// options: conflicts lines gplex conflicts

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace typroject
{
internal enum Tokens {error=2,EOF=3,EQUALS=4,COLON=5,MUL=6,
    LPAREN=7,RPAREN=8,AMP=9,PLUS=10,MINUS=11,DOLLARS=12,
    COMMA=13,NEWLINE=14,FUNC=15,ASSIGN=16,NOT=17,NOTEQUAL=18,
    LEQUAL=19,GEQUAL=20,LBRACE=21,RBRACE=22,LBRACK=23,RBRACK=24,
    DOT=25,LT=26,GT=27,LSHIFT=28,RSHIFT=29,SEMICOLON=30,
    LOR=31,LAND=32,OR=33,AND=34,APPEND=35,ASSIGNIF=36,
    IF=37,ELSE=38,INCLUDE=39,RULEFOR=40,INPUTS=41,DEPENDS=42,
    ALWAYS=43,SHELLCMD=44,TYPROJECT=45,SOURCES=46,MKDIR=47,FUNCTION=48,
    RETURN=49,EXPORT=50,INTEGER=51,STRING=52,VOID=53,ARRAY=54,
    OBJECT=55,FUNCREF=56,ANY=57,NULL=58,FOR=59,FOREACH=60,
    IN=61,WHILE=62,DO=63,INT=64};

internal partial struct ValueType
#line 15 "typ.y"
       {
		public int intval;
		public string strval;
		public Expression exprval;
	}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[21];
  private static State[] states = new State[33];
  private static string[] nonTerms = new string[] {
      "expression", "expr", "expr2", "expr3", "expr6", "expr7", "expr10", "expr11", 
      "$accept", };

  static Parser() {
    states[0] = new State(new int[]{17,17,52,20,64,21,7,22},new int[]{-1,1,-2,3,-3,4,-4,5,-5,8,-6,11,-7,14,-8,19});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(-3);
    states[5] = new State(new int[]{31,6,3,-5,8,-5});
    states[6] = new State(new int[]{17,17,52,20,64,21,7,22},new int[]{-3,7,-4,5,-5,8,-6,11,-7,14,-8,19});
    states[7] = new State(-4);
    states[8] = new State(new int[]{32,9,31,-7,3,-7,8,-7});
    states[9] = new State(new int[]{17,17,52,20,64,21,7,22},new int[]{-4,10,-5,8,-6,11,-7,14,-8,19});
    states[10] = new State(-6);
    states[11] = new State(new int[]{4,12,18,31,32,-10,31,-10,3,-10,8,-10});
    states[12] = new State(new int[]{17,17,52,20,64,21,7,22},new int[]{-5,13,-6,11,-7,14,-8,19});
    states[13] = new State(-8);
    states[14] = new State(new int[]{26,15,27,25,19,27,20,29,4,-15,18,-15,32,-15,31,-15,3,-15,8,-15});
    states[15] = new State(new int[]{17,17,52,20,64,21,7,22},new int[]{-6,16,-7,14,-8,19});
    states[16] = new State(-11);
    states[17] = new State(new int[]{17,17,52,20,64,21,7,22},new int[]{-7,18,-8,19});
    states[18] = new State(-16);
    states[19] = new State(-17);
    states[20] = new State(-18);
    states[21] = new State(-19);
    states[22] = new State(new int[]{17,17,52,20,64,21,7,22},new int[]{-2,23,-3,4,-4,5,-5,8,-6,11,-7,14,-8,19});
    states[23] = new State(new int[]{8,24});
    states[24] = new State(-20);
    states[25] = new State(new int[]{17,17,52,20,64,21,7,22},new int[]{-6,26,-7,14,-8,19});
    states[26] = new State(-12);
    states[27] = new State(new int[]{17,17,52,20,64,21,7,22},new int[]{-6,28,-7,14,-8,19});
    states[28] = new State(-13);
    states[29] = new State(new int[]{17,17,52,20,64,21,7,22},new int[]{-6,30,-7,14,-8,19});
    states[30] = new State(-14);
    states[31] = new State(new int[]{17,17,52,20,64,21,7,22},new int[]{-5,32,-6,11,-7,14,-8,19});
    states[32] = new State(-9);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-9, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-2});
    rules[3] = new Rule(-2, new int[]{-3});
    rules[4] = new Rule(-3, new int[]{-4,31,-3});
    rules[5] = new Rule(-3, new int[]{-4});
    rules[6] = new Rule(-4, new int[]{-5,32,-4});
    rules[7] = new Rule(-4, new int[]{-5});
    rules[8] = new Rule(-5, new int[]{-6,4,-5});
    rules[9] = new Rule(-5, new int[]{-6,18,-5});
    rules[10] = new Rule(-5, new int[]{-6});
    rules[11] = new Rule(-6, new int[]{-7,26,-6});
    rules[12] = new Rule(-6, new int[]{-7,27,-6});
    rules[13] = new Rule(-6, new int[]{-7,19,-6});
    rules[14] = new Rule(-6, new int[]{-7,20,-6});
    rules[15] = new Rule(-6, new int[]{-7});
    rules[16] = new Rule(-7, new int[]{17,-7});
    rules[17] = new Rule(-7, new int[]{-8});
    rules[18] = new Rule(-8, new int[]{52});
    rules[19] = new Rule(-8, new int[]{64});
    rules[20] = new Rule(-8, new int[]{7,-2,8});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // expression -> expr
#line 27 "typ.y"
                         { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; val = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 3: // expr -> expr2
#line 30 "typ.y"
                    { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 4: // expr2 -> expr3, LOR, expr2
#line 33 "typ.y"
                             { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.LOR }; }
#line default
        break;
      case 5: // expr2 -> expr3
#line 34 "typ.y"
                 { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 6: // expr3 -> expr6, LAND, expr3
#line 37 "typ.y"
                             { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.LAND }; }
#line default
        break;
      case 7: // expr3 -> expr6
#line 38 "typ.y"
                 { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 8: // expr6 -> expr7, EQUALS, expr6
#line 41 "typ.y"
                               { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.EQUALS }; }
#line default
        break;
      case 9: // expr6 -> expr7, NOTEQUAL, expr6
#line 42 "typ.y"
                          { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.NOTEQUAL }; }
#line default
        break;
      case 10: // expr6 -> expr7
#line 43 "typ.y"
                 { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 11: // expr7 -> expr10, LT, expr7
#line 46 "typ.y"
                             { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.LT }; }
#line default
        break;
      case 12: // expr7 -> expr10, GT, expr7
#line 47 "typ.y"
                         { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.GT }; }
#line default
        break;
      case 13: // expr7 -> expr10, LEQUAL, expr7
#line 48 "typ.y"
                            { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.LEQUAL }; }
#line default
        break;
      case 14: // expr7 -> expr10, GEQUAL, expr7
#line 49 "typ.y"
                            { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.GEQUAL }; }
#line default
        break;
      case 15: // expr7 -> expr10
#line 50 "typ.y"
                  { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 16: // expr10 -> NOT, expr10
#line 53 "typ.y"
                          { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-1].exprval, b = null, op = Tokens.NOT }; }
#line default
        break;
      case 17: // expr10 -> expr11
#line 54 "typ.y"
                  { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 18: // expr11 -> STRING
#line 57 "typ.y"
                       { CurrentSemanticValue.exprval = new StringExpression { val = ValueStack[ValueStack.Depth-1].strval }; }
#line default
        break;
      case 19: // expr11 -> INT
#line 58 "typ.y"
                { CurrentSemanticValue.exprval = new IntExpression { val = ValueStack[ValueStack.Depth-1].intval }; }
#line default
        break;
      case 20: // expr11 -> LPAREN, expr, RPAREN
#line 59 "typ.y"
                           { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-2].exprval; }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 63 "typ.y"

#line default
}
}

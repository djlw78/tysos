// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-JOHN
// DateTime: 25/05/2016 21:04:35
// UserName: jncro
// Input file <tablemap.y - 25/05/2016 21:04:34>

// options: conflicts lines gplex conflicts

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace TableMap
{
internal enum Tokens {error=2,EOF=3,EQUALS=4,COLON=5,MUL=6,
    LPAREN=7,RPAREN=8,AMP=9,PLUS=10,MINUS=11,DOLLARS=12,
    COMMA=13,NEWLINE=14,FUNC=15,ASSIGN=16,NOT=17,NOTEQUAL=18,
    LEQUAL=19,GEQUAL=20,LBRACE=21,RBRACE=22,LBRACK=23,RBRACK=24,
    DOT=25,LT=26,GT=27,LSHIFT=28,RSHIFT=29,SEMICOLON=30,
    LOR=31,LAND=32,OR=33,AND=34,APPEND=35,ASSIGNIF=36,
    IF=37,ELSE=38,INCLUDE=39,RULEFOR=40,INPUTS=41,DEPENDS=42,
    ALWAYS=43,SHELLCMD=44,TYPROJECT=45,SOURCES=46,MKDIR=47,FUNCTION=48,
    RETURN=49,EXPORT=50,ISDIR=51,ISFILE=52,DEFINED=53,BUILD=54,
    INTEGER=55,STRING=56,VOID=57,ARRAY=58,OBJECT=59,FUNCREF=60,
    FOR=61,FOREACH=62,IN=63,WHILE=64,DO=65,INT=66,
    LABEL=67};

internal partial struct ValueType
#line 16 "tablemap.y"
       {
		public int intval;
		public string strval;
		public Statement stmtval;
		public Expression exprval;
		public List<Expression> exprlist;
		public TableMap.Tokens tokval;
		public Expression.EvalResult.ResultType typeval;
		public FunctionStatement.FunctionArg argval;
		public List<FunctionStatement.FunctionArg> arglistval;
		public List<Expression.EvalResult.ResultType> typelistval;
		public List<ObjDef> objdeflist;
		public ObjDef objdefval;
		public bool bval;
	}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[105];
  private static State[] states = new State[184];
  private static string[] nonTerms = new string[] {
      "file", "export", "expr", "expr2", "expr3", "expr4", "expr5", "expr6", 
      "expr7", "expr7a", "expr8", "expr9", "expr10", "expr11", "strlabelexpr", 
      "funccall", "labelexpr", "labelexpr2", "funcrefexpr", "stmtblock", "stmtlist", 
      "stmt", "stmt2", "define", "ifblock", "cmd", "include", "funcdef", "forblock", 
      "foreachblock", "whileblock", "doblock", "exprlist", "arrayexpr", "assignop", 
      "arg", "argtype", "arglist", "typelist", "objmember", "objlist", "objexpr", 
      "$accept", };

  static Parser() {
    states[0] = new State(new int[]{21,4,67,53,56,59,37,120,61,127,62,138,64,146,65,152,50,171,49,175,39,179,3,-2,48,-20},new int[]{-1,1,-20,3,-21,183,-22,182,-23,8,-24,9,-17,11,-18,61,-16,115,-15,116,-25,119,-29,126,-30,137,-31,145,-32,151,-2,158,-26,173,-27,177});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(-3);
    states[4] = new State(new int[]{22,181,67,53,56,59,37,120,61,127,62,138,64,146,65,152,50,171,49,175,39,179,48,-20},new int[]{-21,5,-22,182,-23,8,-24,9,-17,11,-18,61,-16,115,-15,116,-25,119,-29,126,-30,137,-31,145,-32,151,-2,158,-26,173,-27,177});
    states[5] = new State(new int[]{22,6,67,53,56,59,37,120,61,127,62,138,64,146,65,152,50,171,49,175,39,179,48,-20},new int[]{-22,7,-23,8,-24,9,-17,11,-18,61,-16,115,-15,116,-25,119,-29,126,-30,137,-31,145,-32,151,-2,158,-26,173,-27,177});
    states[6] = new State(-14);
    states[7] = new State(-17);
    states[8] = new State(-18);
    states[9] = new State(new int[]{30,10});
    states[10] = new State(-21);
    states[11] = new State(new int[]{16,112,36,113,35,114,25,-6,23,-6},new int[]{-35,12});
    states[12] = new State(new int[]{7,14,17,45,11,47,56,59,67,53,66,63,23,65,60,72},new int[]{-3,13,-4,38,-5,17,-6,20,-7,23,-8,26,-9,29,-10,32,-11,35,-12,39,-13,42,-14,49,-15,50,-17,60,-18,61,-16,62,-34,64,-42,70,-19,71});
    states[13] = new State(-35);
    states[14] = new State(new int[]{17,45,11,47,56,59,67,53,66,63,23,65,60,72},new int[]{-4,15,-5,17,-6,20,-7,23,-8,26,-9,29,-10,32,-11,35,-12,39,-13,42,-14,49,-15,50,-17,60,-18,61,-16,62,-34,64,-42,70,-19,71});
    states[15] = new State(new int[]{8,16});
    states[16] = new State(-50);
    states[17] = new State(new int[]{31,18,30,-53,8,-53,26,-53,27,-53,19,-53,20,-53,4,-53,18,-53,34,-53,33,-53,32,-53,13,-53,24,-53,21,-53});
    states[18] = new State(new int[]{17,45,11,47,56,59,67,53,66,63,23,65,60,72},new int[]{-4,19,-5,17,-6,20,-7,23,-8,26,-9,29,-10,32,-11,35,-12,39,-13,42,-14,49,-15,50,-17,60,-18,61,-16,62,-34,64,-42,70,-19,71});
    states[19] = new State(-52);
    states[20] = new State(new int[]{32,21,31,-55,30,-55,8,-55,26,-55,27,-55,19,-55,20,-55,4,-55,18,-55,34,-55,33,-55,13,-55,24,-55,21,-55});
    states[21] = new State(new int[]{17,45,11,47,56,59,67,53,66,63,23,65,60,72},new int[]{-5,22,-6,20,-7,23,-8,26,-9,29,-10,32,-11,35,-12,39,-13,42,-14,49,-15,50,-17,60,-18,61,-16,62,-34,64,-42,70,-19,71});
    states[22] = new State(-54);
    states[23] = new State(new int[]{33,24,32,-57,31,-57,30,-57,8,-57,26,-57,27,-57,19,-57,20,-57,4,-57,18,-57,34,-57,13,-57,24,-57,21,-57});
    states[24] = new State(new int[]{17,45,11,47,56,59,67,53,66,63,23,65,60,72},new int[]{-6,25,-7,23,-8,26,-9,29,-10,32,-11,35,-12,39,-13,42,-14,49,-15,50,-17,60,-18,61,-16,62,-34,64,-42,70,-19,71});
    states[25] = new State(-56);
    states[26] = new State(new int[]{34,27,33,-59,32,-59,31,-59,30,-59,8,-59,26,-59,27,-59,19,-59,20,-59,4,-59,18,-59,13,-59,24,-59,21,-59});
    states[27] = new State(new int[]{17,45,11,47,56,59,67,53,66,63,23,65,60,72},new int[]{-7,28,-8,26,-9,29,-10,32,-11,35,-12,39,-13,42,-14,49,-15,50,-17,60,-18,61,-16,62,-34,64,-42,70,-19,71});
    states[28] = new State(-58);
    states[29] = new State(new int[]{4,30,18,110,34,-62,33,-62,32,-62,31,-62,30,-62,8,-62,26,-62,27,-62,19,-62,20,-62,13,-62,24,-62,21,-62});
    states[30] = new State(new int[]{17,45,11,47,56,59,67,53,66,63,23,65,60,72},new int[]{-8,31,-9,29,-10,32,-11,35,-12,39,-13,42,-14,49,-15,50,-17,60,-18,61,-16,62,-34,64,-42,70,-19,71});
    states[31] = new State(-60);
    states[32] = new State(new int[]{26,33,27,104,19,106,20,108,4,-67,18,-67,34,-67,33,-67,32,-67,31,-67,30,-67,8,-67,13,-67,24,-67,21,-67});
    states[33] = new State(new int[]{17,45,11,47,56,59,67,53,66,63,23,65,60,72},new int[]{-9,34,-10,32,-11,35,-12,39,-13,42,-14,49,-15,50,-17,60,-18,61,-16,62,-34,64,-42,70,-19,71});
    states[34] = new State(-63);
    states[35] = new State(new int[]{28,36,29,102,26,-70,27,-70,19,-70,20,-70,4,-70,18,-70,34,-70,33,-70,32,-70,31,-70,30,-70,8,-70,13,-70,24,-70,21,-70});
    states[36] = new State(new int[]{7,14,17,45,11,47,56,59,67,53,66,63,23,65,60,72},new int[]{-3,37,-4,38,-5,17,-6,20,-7,23,-8,26,-9,29,-10,32,-11,35,-12,39,-13,42,-14,49,-15,50,-17,60,-18,61,-16,62,-34,64,-42,70,-19,71});
    states[37] = new State(-68);
    states[38] = new State(-51);
    states[39] = new State(new int[]{10,40,11,100,28,-73,29,-73,26,-73,27,-73,19,-73,20,-73,4,-73,18,-73,34,-73,33,-73,32,-73,31,-73,30,-73,8,-73,13,-73,24,-73,21,-73});
    states[40] = new State(new int[]{17,45,11,47,56,59,67,53,66,63,23,65,60,72},new int[]{-11,41,-12,39,-13,42,-14,49,-15,50,-17,60,-18,61,-16,62,-34,64,-42,70,-19,71});
    states[41] = new State(-71);
    states[42] = new State(new int[]{6,43,10,-75,11,-75,28,-75,29,-75,26,-75,27,-75,19,-75,20,-75,4,-75,18,-75,34,-75,33,-75,32,-75,31,-75,30,-75,8,-75,13,-75,24,-75,21,-75});
    states[43] = new State(new int[]{17,45,11,47,56,59,67,53,66,63,23,65,60,72},new int[]{-12,44,-13,42,-14,49,-15,50,-17,60,-18,61,-16,62,-34,64,-42,70,-19,71});
    states[44] = new State(-74);
    states[45] = new State(new int[]{17,45,11,47,56,59,67,53,66,63,23,65,60,72},new int[]{-13,46,-14,49,-15,50,-17,60,-18,61,-16,62,-34,64,-42,70,-19,71});
    states[46] = new State(-76);
    states[47] = new State(new int[]{17,45,11,47,56,59,67,53,66,63,23,65,60,72},new int[]{-13,48,-14,49,-15,50,-17,60,-18,61,-16,62,-34,64,-42,70,-19,71});
    states[48] = new State(-77);
    states[49] = new State(-78);
    states[50] = new State(new int[]{25,51,23,97,6,-79,10,-79,11,-79,28,-79,29,-79,26,-79,27,-79,19,-79,20,-79,4,-79,18,-79,34,-79,33,-79,32,-79,31,-79,30,-79,8,-79,13,-79,24,-79,21,-79});
    states[51] = new State(new int[]{67,53},new int[]{-18,52,-16,62});
    states[52] = new State(-8);
    states[53] = new State(new int[]{7,54,16,-10,36,-10,35,-10,25,-10,23,-10,6,-10,10,-10,11,-10,28,-10,29,-10,26,-10,27,-10,19,-10,20,-10,4,-10,18,-10,34,-10,33,-10,32,-10,31,-10,30,-10,8,-10,13,-10,24,-10,21,-10});
    states[54] = new State(new int[]{17,45,11,47,56,59,67,53,66,63,23,65,60,72,8,-48,13,-48},new int[]{-33,55,-4,94,-5,17,-6,20,-7,23,-8,26,-9,29,-10,32,-11,35,-12,39,-13,42,-14,49,-15,50,-17,60,-18,61,-16,62,-34,64,-42,70,-19,71});
    states[55] = new State(new int[]{8,56,13,57});
    states[56] = new State(-12);
    states[57] = new State(new int[]{17,45,11,47,56,59,67,53,66,63,23,65,60,72},new int[]{-4,58,-5,17,-6,20,-7,23,-8,26,-9,29,-10,32,-11,35,-12,39,-13,42,-14,49,-15,50,-17,60,-18,61,-16,62,-34,64,-42,70,-19,71});
    states[58] = new State(-46);
    states[59] = new State(-5);
    states[60] = new State(-6);
    states[61] = new State(-7);
    states[62] = new State(-11);
    states[63] = new State(-80);
    states[64] = new State(-81);
    states[65] = new State(new int[]{17,45,11,47,56,59,67,95,66,63,23,65,60,72,24,-48,13,-48},new int[]{-33,66,-41,86,-4,94,-5,17,-6,20,-7,23,-8,26,-9,29,-10,32,-11,35,-12,39,-13,42,-14,49,-15,50,-17,60,-18,61,-16,62,-34,64,-42,70,-19,71,-40,96});
    states[66] = new State(new int[]{24,67,13,68});
    states[67] = new State(-88);
    states[68] = new State(new int[]{24,69,17,45,11,47,56,59,67,53,66,63,23,65,60,72},new int[]{-4,58,-5,17,-6,20,-7,23,-8,26,-9,29,-10,32,-11,35,-12,39,-13,42,-14,49,-15,50,-17,60,-18,61,-16,62,-34,64,-42,70,-19,71});
    states[69] = new State(-89);
    states[70] = new State(-82);
    states[71] = new State(-83);
    states[72] = new State(new int[]{67,73});
    states[73] = new State(new int[]{7,74});
    states[74] = new State(new int[]{55,79,56,80,58,81,59,82,57,83,48,84,8,-87,13,-87},new int[]{-39,75,-37,85});
    states[75] = new State(new int[]{8,76,13,77});
    states[76] = new State(-84);
    states[77] = new State(new int[]{55,79,56,80,58,81,59,82,57,83,48,84},new int[]{-37,78});
    states[78] = new State(-85);
    states[79] = new State(-98);
    states[80] = new State(-99);
    states[81] = new State(-100);
    states[82] = new State(-101);
    states[83] = new State(-102);
    states[84] = new State(-103);
    states[85] = new State(-86);
    states[86] = new State(new int[]{24,87,13,88});
    states[87] = new State(-93);
    states[88] = new State(new int[]{24,89,67,91},new int[]{-40,90});
    states[89] = new State(-94);
    states[90] = new State(-96);
    states[91] = new State(new int[]{16,92});
    states[92] = new State(new int[]{7,14,17,45,11,47,56,59,67,53,66,63,23,65,60,72},new int[]{-3,93,-4,38,-5,17,-6,20,-7,23,-8,26,-9,29,-10,32,-11,35,-12,39,-13,42,-14,49,-15,50,-17,60,-18,61,-16,62,-34,64,-42,70,-19,71});
    states[93] = new State(-97);
    states[94] = new State(-47);
    states[95] = new State(new int[]{7,54,16,92,25,-10,23,-10,6,-10,10,-10,11,-10,28,-10,29,-10,26,-10,27,-10,19,-10,20,-10,4,-10,18,-10,34,-10,33,-10,32,-10,31,-10,24,-10,13,-10});
    states[96] = new State(-95);
    states[97] = new State(new int[]{7,14,17,45,11,47,56,59,67,53,66,63,23,65,60,72},new int[]{-3,98,-4,38,-5,17,-6,20,-7,23,-8,26,-9,29,-10,32,-11,35,-12,39,-13,42,-14,49,-15,50,-17,60,-18,61,-16,62,-34,64,-42,70,-19,71});
    states[98] = new State(new int[]{24,99});
    states[99] = new State(-9);
    states[100] = new State(new int[]{17,45,11,47,56,59,67,53,66,63,23,65,60,72},new int[]{-11,101,-12,39,-13,42,-14,49,-15,50,-17,60,-18,61,-16,62,-34,64,-42,70,-19,71});
    states[101] = new State(-72);
    states[102] = new State(new int[]{7,14,17,45,11,47,56,59,67,53,66,63,23,65,60,72},new int[]{-3,103,-4,38,-5,17,-6,20,-7,23,-8,26,-9,29,-10,32,-11,35,-12,39,-13,42,-14,49,-15,50,-17,60,-18,61,-16,62,-34,64,-42,70,-19,71});
    states[103] = new State(-69);
    states[104] = new State(new int[]{17,45,11,47,56,59,67,53,66,63,23,65,60,72},new int[]{-9,105,-10,32,-11,35,-12,39,-13,42,-14,49,-15,50,-17,60,-18,61,-16,62,-34,64,-42,70,-19,71});
    states[105] = new State(-64);
    states[106] = new State(new int[]{17,45,11,47,56,59,67,53,66,63,23,65,60,72},new int[]{-9,107,-10,32,-11,35,-12,39,-13,42,-14,49,-15,50,-17,60,-18,61,-16,62,-34,64,-42,70,-19,71});
    states[107] = new State(-65);
    states[108] = new State(new int[]{17,45,11,47,56,59,67,53,66,63,23,65,60,72},new int[]{-9,109,-10,32,-11,35,-12,39,-13,42,-14,49,-15,50,-17,60,-18,61,-16,62,-34,64,-42,70,-19,71});
    states[109] = new State(-66);
    states[110] = new State(new int[]{17,45,11,47,56,59,67,53,66,63,23,65,60,72},new int[]{-8,111,-9,29,-10,32,-11,35,-12,39,-13,42,-14,49,-15,50,-17,60,-18,61,-16,62,-34,64,-42,70,-19,71});
    states[111] = new State(-61);
    states[112] = new State(-36);
    states[113] = new State(-37);
    states[114] = new State(-38);
    states[115] = new State(new int[]{16,-11,36,-11,35,-11,25,-11,23,-11,30,-33});
    states[116] = new State(new int[]{25,117,23,97});
    states[117] = new State(new int[]{67,53},new int[]{-18,52,-16,118});
    states[118] = new State(new int[]{30,-34,16,-11,36,-11,35,-11,25,-11,23,-11});
    states[119] = new State(-22);
    states[120] = new State(new int[]{7,14,17,45,11,47,56,59,67,53,66,63,23,65,60,72},new int[]{-3,121,-4,38,-5,17,-6,20,-7,23,-8,26,-9,29,-10,32,-11,35,-12,39,-13,42,-14,49,-15,50,-17,60,-18,61,-16,62,-34,64,-42,70,-19,71});
    states[121] = new State(new int[]{21,4},new int[]{-20,122});
    states[122] = new State(new int[]{38,123,67,-39,56,-39,37,-39,61,-39,62,-39,64,-39,65,-39,50,-39,49,-39,39,-39,48,-39,3,-39,22,-39});
    states[123] = new State(new int[]{21,4,37,120},new int[]{-20,124,-25,125});
    states[124] = new State(-40);
    states[125] = new State(-41);
    states[126] = new State(-23);
    states[127] = new State(new int[]{7,128});
    states[128] = new State(new int[]{67,53,56,59},new int[]{-24,129,-17,11,-18,61,-16,62,-15,136});
    states[129] = new State(new int[]{30,130});
    states[130] = new State(new int[]{7,14,17,45,11,47,56,59,67,53,66,63,23,65,60,72},new int[]{-3,131,-4,38,-5,17,-6,20,-7,23,-8,26,-9,29,-10,32,-11,35,-12,39,-13,42,-14,49,-15,50,-17,60,-18,61,-16,62,-34,64,-42,70,-19,71});
    states[131] = new State(new int[]{30,132});
    states[132] = new State(new int[]{67,53,56,59},new int[]{-24,133,-17,11,-18,61,-16,62,-15,136});
    states[133] = new State(new int[]{8,134});
    states[134] = new State(new int[]{21,4},new int[]{-20,135});
    states[135] = new State(-42);
    states[136] = new State(new int[]{25,51,23,97});
    states[137] = new State(-24);
    states[138] = new State(new int[]{7,139});
    states[139] = new State(new int[]{67,140});
    states[140] = new State(new int[]{63,141});
    states[141] = new State(new int[]{7,14,17,45,11,47,56,59,67,53,66,63,23,65,60,72},new int[]{-3,142,-4,38,-5,17,-6,20,-7,23,-8,26,-9,29,-10,32,-11,35,-12,39,-13,42,-14,49,-15,50,-17,60,-18,61,-16,62,-34,64,-42,70,-19,71});
    states[142] = new State(new int[]{8,143});
    states[143] = new State(new int[]{21,4},new int[]{-20,144});
    states[144] = new State(-43);
    states[145] = new State(-25);
    states[146] = new State(new int[]{7,147});
    states[147] = new State(new int[]{7,14,17,45,11,47,56,59,67,53,66,63,23,65,60,72},new int[]{-3,148,-4,38,-5,17,-6,20,-7,23,-8,26,-9,29,-10,32,-11,35,-12,39,-13,42,-14,49,-15,50,-17,60,-18,61,-16,62,-34,64,-42,70,-19,71});
    states[148] = new State(new int[]{8,149});
    states[149] = new State(new int[]{21,4},new int[]{-20,150});
    states[150] = new State(-44);
    states[151] = new State(-26);
    states[152] = new State(new int[]{21,4},new int[]{-20,153});
    states[153] = new State(new int[]{64,154});
    states[154] = new State(new int[]{7,155});
    states[155] = new State(new int[]{7,14,17,45,11,47,56,59,67,53,66,63,23,65,60,72},new int[]{-3,156,-4,38,-5,17,-6,20,-7,23,-8,26,-9,29,-10,32,-11,35,-12,39,-13,42,-14,49,-15,50,-17,60,-18,61,-16,62,-34,64,-42,70,-19,71});
    states[156] = new State(new int[]{8,157});
    states[157] = new State(-45);
    states[158] = new State(new int[]{48,160},new int[]{-28,159});
    states[159] = new State(-27);
    states[160] = new State(new int[]{67,161});
    states[161] = new State(new int[]{7,162});
    states[162] = new State(new int[]{55,79,56,80,58,81,59,82,57,83,48,84,8,-92,13,-92},new int[]{-38,163,-36,170,-37,168});
    states[163] = new State(new int[]{8,164,13,166});
    states[164] = new State(new int[]{21,4},new int[]{-20,165});
    states[165] = new State(-13);
    states[166] = new State(new int[]{55,79,56,80,58,81,59,82,57,83,48,84},new int[]{-36,167,-37,168});
    states[167] = new State(-90);
    states[168] = new State(new int[]{67,169});
    states[169] = new State(-104);
    states[170] = new State(-91);
    states[171] = new State(new int[]{67,172,48,-19});
    states[172] = new State(-30);
    states[173] = new State(new int[]{30,174});
    states[174] = new State(-28);
    states[175] = new State(new int[]{7,14,17,45,11,47,56,59,67,53,66,63,23,65,60,72,30,-32},new int[]{-3,176,-4,38,-5,17,-6,20,-7,23,-8,26,-9,29,-10,32,-11,35,-12,39,-13,42,-14,49,-15,50,-17,60,-18,61,-16,62,-34,64,-42,70,-19,71});
    states[176] = new State(-31);
    states[177] = new State(new int[]{30,178});
    states[178] = new State(-29);
    states[179] = new State(new int[]{7,14,17,45,11,47,56,59,67,53,66,63,23,65,60,72},new int[]{-3,180,-4,38,-5,17,-6,20,-7,23,-8,26,-9,29,-10,32,-11,35,-12,39,-13,42,-14,49,-15,50,-17,60,-18,61,-16,62,-34,64,-42,70,-19,71});
    states[180] = new State(-49);
    states[181] = new State(-15);
    states[182] = new State(-16);
    states[183] = new State(new int[]{67,53,56,59,37,120,61,127,62,138,64,146,65,152,50,171,49,175,39,179,3,-4,48,-20},new int[]{-22,7,-23,8,-24,9,-17,11,-18,61,-16,115,-15,116,-25,119,-29,126,-30,137,-31,145,-32,151,-2,158,-26,173,-27,177});

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-43, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{});
    rules[3] = new Rule(-1, new int[]{-20});
    rules[4] = new Rule(-1, new int[]{-21});
    rules[5] = new Rule(-15, new int[]{56});
    rules[6] = new Rule(-15, new int[]{-17});
    rules[7] = new Rule(-17, new int[]{-18});
    rules[8] = new Rule(-17, new int[]{-15,25,-18});
    rules[9] = new Rule(-17, new int[]{-15,23,-3,24});
    rules[10] = new Rule(-18, new int[]{67});
    rules[11] = new Rule(-18, new int[]{-16});
    rules[12] = new Rule(-16, new int[]{67,7,-33,8});
    rules[13] = new Rule(-28, new int[]{48,67,7,-38,8,-20});
    rules[14] = new Rule(-20, new int[]{21,-21,22});
    rules[15] = new Rule(-20, new int[]{21,22});
    rules[16] = new Rule(-21, new int[]{-22});
    rules[17] = new Rule(-21, new int[]{-21,-22});
    rules[18] = new Rule(-22, new int[]{-23});
    rules[19] = new Rule(-2, new int[]{50});
    rules[20] = new Rule(-2, new int[]{});
    rules[21] = new Rule(-23, new int[]{-24,30});
    rules[22] = new Rule(-23, new int[]{-25});
    rules[23] = new Rule(-23, new int[]{-29});
    rules[24] = new Rule(-23, new int[]{-30});
    rules[25] = new Rule(-23, new int[]{-31});
    rules[26] = new Rule(-23, new int[]{-32});
    rules[27] = new Rule(-23, new int[]{-2,-28});
    rules[28] = new Rule(-23, new int[]{-26,30});
    rules[29] = new Rule(-23, new int[]{-27,30});
    rules[30] = new Rule(-26, new int[]{50,67});
    rules[31] = new Rule(-26, new int[]{49,-3});
    rules[32] = new Rule(-26, new int[]{49});
    rules[33] = new Rule(-26, new int[]{-16});
    rules[34] = new Rule(-26, new int[]{-15,25,-16});
    rules[35] = new Rule(-24, new int[]{-17,-35,-3});
    rules[36] = new Rule(-35, new int[]{16});
    rules[37] = new Rule(-35, new int[]{36});
    rules[38] = new Rule(-35, new int[]{35});
    rules[39] = new Rule(-25, new int[]{37,-3,-20});
    rules[40] = new Rule(-25, new int[]{37,-3,-20,38,-20});
    rules[41] = new Rule(-25, new int[]{37,-3,-20,38,-25});
    rules[42] = new Rule(-29, new int[]{61,7,-24,30,-3,30,-24,8,-20});
    rules[43] = new Rule(-30, new int[]{62,7,67,63,-3,8,-20});
    rules[44] = new Rule(-31, new int[]{64,7,-3,8,-20});
    rules[45] = new Rule(-32, new int[]{65,-20,64,7,-3,8});
    rules[46] = new Rule(-33, new int[]{-33,13,-4});
    rules[47] = new Rule(-33, new int[]{-4});
    rules[48] = new Rule(-33, new int[]{});
    rules[49] = new Rule(-27, new int[]{39,-3});
    rules[50] = new Rule(-3, new int[]{7,-4,8});
    rules[51] = new Rule(-3, new int[]{-4});
    rules[52] = new Rule(-4, new int[]{-5,31,-4});
    rules[53] = new Rule(-4, new int[]{-5});
    rules[54] = new Rule(-5, new int[]{-6,32,-5});
    rules[55] = new Rule(-5, new int[]{-6});
    rules[56] = new Rule(-6, new int[]{-7,33,-6});
    rules[57] = new Rule(-6, new int[]{-7});
    rules[58] = new Rule(-7, new int[]{-8,34,-7});
    rules[59] = new Rule(-7, new int[]{-8});
    rules[60] = new Rule(-8, new int[]{-9,4,-8});
    rules[61] = new Rule(-8, new int[]{-9,18,-8});
    rules[62] = new Rule(-8, new int[]{-9});
    rules[63] = new Rule(-9, new int[]{-10,26,-9});
    rules[64] = new Rule(-9, new int[]{-10,27,-9});
    rules[65] = new Rule(-9, new int[]{-10,19,-9});
    rules[66] = new Rule(-9, new int[]{-10,20,-9});
    rules[67] = new Rule(-9, new int[]{-10});
    rules[68] = new Rule(-10, new int[]{-11,28,-3});
    rules[69] = new Rule(-10, new int[]{-11,29,-3});
    rules[70] = new Rule(-10, new int[]{-11});
    rules[71] = new Rule(-11, new int[]{-12,10,-11});
    rules[72] = new Rule(-11, new int[]{-12,11,-11});
    rules[73] = new Rule(-11, new int[]{-12});
    rules[74] = new Rule(-12, new int[]{-13,6,-12});
    rules[75] = new Rule(-12, new int[]{-13});
    rules[76] = new Rule(-13, new int[]{17,-13});
    rules[77] = new Rule(-13, new int[]{11,-13});
    rules[78] = new Rule(-13, new int[]{-14});
    rules[79] = new Rule(-14, new int[]{-15});
    rules[80] = new Rule(-14, new int[]{66});
    rules[81] = new Rule(-14, new int[]{-34});
    rules[82] = new Rule(-14, new int[]{-42});
    rules[83] = new Rule(-14, new int[]{-19});
    rules[84] = new Rule(-19, new int[]{60,67,7,-39,8});
    rules[85] = new Rule(-39, new int[]{-39,13,-37});
    rules[86] = new Rule(-39, new int[]{-37});
    rules[87] = new Rule(-39, new int[]{});
    rules[88] = new Rule(-34, new int[]{23,-33,24});
    rules[89] = new Rule(-34, new int[]{23,-33,13,24});
    rules[90] = new Rule(-38, new int[]{-38,13,-36});
    rules[91] = new Rule(-38, new int[]{-36});
    rules[92] = new Rule(-38, new int[]{});
    rules[93] = new Rule(-42, new int[]{23,-41,24});
    rules[94] = new Rule(-42, new int[]{23,-41,13,24});
    rules[95] = new Rule(-41, new int[]{-40});
    rules[96] = new Rule(-41, new int[]{-41,13,-40});
    rules[97] = new Rule(-40, new int[]{67,16,-3});
    rules[98] = new Rule(-37, new int[]{55});
    rules[99] = new Rule(-37, new int[]{56});
    rules[100] = new Rule(-37, new int[]{58});
    rules[101] = new Rule(-37, new int[]{59});
    rules[102] = new Rule(-37, new int[]{57});
    rules[103] = new Rule(-37, new int[]{48});
    rules[104] = new Rule(-36, new int[]{-37,67});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // file -> /* empty */
#line 49 "tablemap.y"
                { output = new StatementList(); }
#line default
        break;
      case 3: // file -> stmtblock
#line 50 "tablemap.y"
                    { output = ValueStack[ValueStack.Depth-1].stmtval; }
#line default
        break;
      case 4: // file -> stmtlist
#line 51 "tablemap.y"
                   { output = ValueStack[ValueStack.Depth-1].stmtval; }
#line default
        break;
      case 5: // strlabelexpr -> STRING
#line 54 "tablemap.y"
                           { CurrentSemanticValue.exprval = new StringExpression { val = ValueStack[ValueStack.Depth-1].strval }; }
#line default
        break;
      case 6: // strlabelexpr -> labelexpr
#line 55 "tablemap.y"
                    { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 7: // labelexpr -> labelexpr2
#line 58 "tablemap.y"
                            { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 8: // labelexpr -> strlabelexpr, DOT, labelexpr2
#line 59 "tablemap.y"
                                  { CurrentSemanticValue.exprval = new LabelMemberExpression { label = ValueStack[ValueStack.Depth-3].exprval, member = ValueStack[ValueStack.Depth-1].exprval }; }
#line default
        break;
      case 9: // labelexpr -> strlabelexpr, LBRACK, expr, RBRACK
#line 60 "tablemap.y"
                                     { CurrentSemanticValue.exprval = new LabelIndexedExpression { label = ValueStack[ValueStack.Depth-4].exprval, index = ValueStack[ValueStack.Depth-2].exprval }; }
#line default
        break;
      case 10: // labelexpr2 -> LABEL
#line 63 "tablemap.y"
                         { CurrentSemanticValue.exprval = new LabelExpression { val = ValueStack[ValueStack.Depth-1].strval }; }
#line default
        break;
      case 11: // labelexpr2 -> funccall
#line 64 "tablemap.y"
                   { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 12: // funccall -> LABEL, LPAREN, exprlist, RPAREN
#line 67 "tablemap.y"
                                        { CurrentSemanticValue.exprval = new FuncCall { target = ValueStack[ValueStack.Depth-4].strval, args = ValueStack[ValueStack.Depth-2].exprlist }; }
#line default
        break;
      case 13: // funcdef -> FUNCTION, LABEL, LPAREN, arglist, RPAREN, stmtblock
#line 70 "tablemap.y"
                                                          { CurrentSemanticValue.stmtval = new FunctionStatement { name = ValueStack[ValueStack.Depth-5].strval, args = ValueStack[ValueStack.Depth-3].arglistval, code = ValueStack[ValueStack.Depth-1].stmtval }; }
#line default
        break;
      case 14: // stmtblock -> LBRACE, stmtlist, RBRACE
#line 73 "tablemap.y"
                                     { CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-2].stmtval; }
#line default
        break;
      case 15: // stmtblock -> LBRACE, RBRACE
#line 74 "tablemap.y"
                       { CurrentSemanticValue.stmtval = new StatementList(); ((StatementList)CurrentSemanticValue.stmtval).list = new List<Statement>(); }
#line default
        break;
      case 16: // stmtlist -> stmt
#line 77 "tablemap.y"
                      { StatementList sl = new StatementList(); sl.list = new List<Statement>(); sl.list.Add(ValueStack[ValueStack.Depth-1].stmtval); CurrentSemanticValue.stmtval = sl; }
#line default
        break;
      case 17: // stmtlist -> stmtlist, stmt
#line 78 "tablemap.y"
                       { ((StatementList)ValueStack[ValueStack.Depth-2].stmtval).list.Add(ValueStack[ValueStack.Depth-1].stmtval); CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-2].stmtval; }
#line default
        break;
      case 18: // stmt -> stmt2
#line 81 "tablemap.y"
                    { CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-1].stmtval; }
#line default
        break;
      case 19: // export -> EXPORT
#line 84 "tablemap.y"
                       { CurrentSemanticValue.bval = true; }
#line default
        break;
      case 20: // export -> /* empty */
#line 85 "tablemap.y"
             { CurrentSemanticValue.bval = false; }
#line default
        break;
      case 21: // stmt2 -> define, SEMICOLON
#line 89 "tablemap.y"
                             { CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-2].stmtval; }
#line default
        break;
      case 22: // stmt2 -> ifblock
#line 90 "tablemap.y"
                   { CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-1].stmtval; }
#line default
        break;
      case 23: // stmt2 -> forblock
#line 91 "tablemap.y"
                   { CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-1].stmtval; }
#line default
        break;
      case 24: // stmt2 -> foreachblock
#line 92 "tablemap.y"
                      { CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-1].stmtval; }
#line default
        break;
      case 25: // stmt2 -> whileblock
#line 93 "tablemap.y"
                     { CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-1].stmtval; }
#line default
        break;
      case 26: // stmt2 -> doblock
#line 94 "tablemap.y"
                   { CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-1].stmtval; }
#line default
        break;
      case 27: // stmt2 -> export, funcdef
#line 95 "tablemap.y"
                        { CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-1].stmtval; ValueStack[ValueStack.Depth-1].stmtval.export = ValueStack[ValueStack.Depth-2].bval; }
#line default
        break;
      case 28: // stmt2 -> cmd, SEMICOLON
#line 96 "tablemap.y"
                       { CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-2].stmtval; }
#line default
        break;
      case 29: // stmt2 -> include, SEMICOLON
#line 97 "tablemap.y"
                          { CurrentSemanticValue.stmtval = ValueStack[ValueStack.Depth-2].stmtval; }
#line default
        break;
      case 30: // cmd -> EXPORT, LABEL
#line 100 "tablemap.y"
                          { CurrentSemanticValue.stmtval = new ExportStatement { v = ValueStack[ValueStack.Depth-1].strval }; }
#line default
        break;
      case 31: // cmd -> RETURN, expr
#line 101 "tablemap.y"
                       { CurrentSemanticValue.stmtval = new ReturnStatement { v = ValueStack[ValueStack.Depth-1].exprval }; }
#line default
        break;
      case 32: // cmd -> RETURN
#line 102 "tablemap.y"
                   { CurrentSemanticValue.stmtval = new ReturnStatement { v = new ResultExpression { e = new Expression.EvalResult() } }; }
#line default
        break;
      case 33: // cmd -> funccall
#line 103 "tablemap.y"
                    { CurrentSemanticValue.stmtval = new ExpressionStatement { expr = ValueStack[ValueStack.Depth-1].exprval }; }
#line default
        break;
      case 34: // cmd -> strlabelexpr, DOT, funccall
#line 104 "tablemap.y"
                                 { CurrentSemanticValue.stmtval = new ExpressionStatement { expr = new LabelMemberExpression { label = ValueStack[ValueStack.Depth-3].exprval, member = ValueStack[ValueStack.Depth-1].exprval } }; }
#line default
        break;
      case 35: // define -> labelexpr, assignop, expr
#line 107 "tablemap.y"
                                     { CurrentSemanticValue.stmtval = new DefineExprStatement { tok_name = ValueStack[ValueStack.Depth-3].exprval, assignop = ValueStack[ValueStack.Depth-2].tokval, val = ValueStack[ValueStack.Depth-1].exprval }; }
#line default
        break;
      case 36: // assignop -> ASSIGN
#line 110 "tablemap.y"
                        { CurrentSemanticValue.tokval = Tokens.ASSIGN; }
#line default
        break;
      case 37: // assignop -> ASSIGNIF
#line 111 "tablemap.y"
                   { CurrentSemanticValue.tokval = Tokens.ASSIGNIF; }
#line default
        break;
      case 38: // assignop -> APPEND
#line 112 "tablemap.y"
                  { CurrentSemanticValue.tokval = Tokens.APPEND; }
#line default
        break;
      case 39: // ifblock -> IF, expr, stmtblock
#line 115 "tablemap.y"
                                 { CurrentSemanticValue.stmtval = new IfBlockStatement { test = ValueStack[ValueStack.Depth-2].exprval, if_block = ValueStack[ValueStack.Depth-1].stmtval, else_block = null }; }
#line default
        break;
      case 40: // ifblock -> IF, expr, stmtblock, ELSE, stmtblock
#line 116 "tablemap.y"
                                      { CurrentSemanticValue.stmtval = new IfBlockStatement { test = ValueStack[ValueStack.Depth-4].exprval, if_block = ValueStack[ValueStack.Depth-3].stmtval, else_block = ValueStack[ValueStack.Depth-1].stmtval }; }
#line default
        break;
      case 41: // ifblock -> IF, expr, stmtblock, ELSE, ifblock
#line 117 "tablemap.y"
                                     { CurrentSemanticValue.stmtval = new IfBlockStatement { test = ValueStack[ValueStack.Depth-4].exprval, if_block = ValueStack[ValueStack.Depth-3].stmtval, else_block = ValueStack[ValueStack.Depth-1].stmtval }; }
#line default
        break;
      case 42: // forblock -> FOR, LPAREN, define, SEMICOLON, expr, SEMICOLON, define, RPAREN, 
               //             stmtblock
#line 120 "tablemap.y"
                                                                              { CurrentSemanticValue.stmtval = new ForBlockStatement { init = ValueStack[ValueStack.Depth-7].stmtval, test = ValueStack[ValueStack.Depth-5].exprval, incr = ValueStack[ValueStack.Depth-3].stmtval, code = ValueStack[ValueStack.Depth-1].stmtval }; }
#line default
        break;
      case 43: // foreachblock -> FOREACH, LPAREN, LABEL, IN, expr, RPAREN, stmtblock
#line 123 "tablemap.y"
                                                            { CurrentSemanticValue.stmtval = new ForEachBlock { val = ValueStack[ValueStack.Depth-5].strval, enumeration = ValueStack[ValueStack.Depth-3].exprval, code = ValueStack[ValueStack.Depth-1].stmtval }; }
#line default
        break;
      case 44: // whileblock -> WHILE, LPAREN, expr, RPAREN, stmtblock
#line 126 "tablemap.y"
                                                { CurrentSemanticValue.stmtval = new WhileBlock { test = ValueStack[ValueStack.Depth-3].exprval, code = ValueStack[ValueStack.Depth-1].stmtval }; }
#line default
        break;
      case 45: // doblock -> DO, stmtblock, WHILE, LPAREN, expr, RPAREN
#line 129 "tablemap.y"
                                                 { CurrentSemanticValue.stmtval = new DoBlock { test = ValueStack[ValueStack.Depth-2].exprval, code = ValueStack[ValueStack.Depth-5].stmtval }; }
#line default
        break;
      case 46: // exprlist -> exprlist, COMMA, expr2
#line 132 "tablemap.y"
                                  { CurrentSemanticValue.exprlist = new List<Expression>(ValueStack[ValueStack.Depth-3].exprlist); CurrentSemanticValue.exprlist.Add(ValueStack[ValueStack.Depth-1].exprval); }
#line default
        break;
      case 47: // exprlist -> expr2
#line 133 "tablemap.y"
                 { CurrentSemanticValue.exprlist = new List<Expression> { ValueStack[ValueStack.Depth-1].exprval }; }
#line default
        break;
      case 48: // exprlist -> /* empty */
#line 134 "tablemap.y"
             { CurrentSemanticValue.exprlist = new List<Expression>(); }
#line default
        break;
      case 49: // include -> INCLUDE, expr
#line 137 "tablemap.y"
                            { CurrentSemanticValue.stmtval = new IncludeStatement { include_file = ValueStack[ValueStack.Depth-1].exprval }; }
#line default
        break;
      case 50: // expr -> LPAREN, expr2, RPAREN
#line 140 "tablemap.y"
                               { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-2].exprval; }
#line default
        break;
      case 51: // expr -> expr2
#line 141 "tablemap.y"
                 { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 52: // expr2 -> expr3, LOR, expr2
#line 144 "tablemap.y"
                             { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.LOR }; }
#line default
        break;
      case 53: // expr2 -> expr3
#line 145 "tablemap.y"
                 { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 54: // expr3 -> expr4, LAND, expr3
#line 148 "tablemap.y"
                             { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.LAND }; }
#line default
        break;
      case 55: // expr3 -> expr4
#line 149 "tablemap.y"
                 { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 56: // expr4 -> expr5, OR, expr4
#line 152 "tablemap.y"
                            { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.OR }; }
#line default
        break;
      case 57: // expr4 -> expr5
#line 153 "tablemap.y"
                 { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 58: // expr5 -> expr6, AND, expr5
#line 156 "tablemap.y"
                             { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.AND }; }
#line default
        break;
      case 59: // expr5 -> expr6
#line 157 "tablemap.y"
                 { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 60: // expr6 -> expr7, EQUALS, expr6
#line 160 "tablemap.y"
                               { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.EQUALS }; }
#line default
        break;
      case 61: // expr6 -> expr7, NOTEQUAL, expr6
#line 161 "tablemap.y"
                            { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.NOTEQUAL }; }
#line default
        break;
      case 62: // expr6 -> expr7
#line 162 "tablemap.y"
                 { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 63: // expr7 -> expr7a, LT, expr7
#line 165 "tablemap.y"
                             { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.LT }; }
#line default
        break;
      case 64: // expr7 -> expr7a, GT, expr7
#line 166 "tablemap.y"
                         { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.GT }; }
#line default
        break;
      case 65: // expr7 -> expr7a, LEQUAL, expr7
#line 167 "tablemap.y"
                            { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.LEQUAL }; }
#line default
        break;
      case 66: // expr7 -> expr7a, GEQUAL, expr7
#line 168 "tablemap.y"
                            { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.GEQUAL }; }
#line default
        break;
      case 67: // expr7 -> expr7a
#line 169 "tablemap.y"
                  { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 68: // expr7a -> expr8, LSHIFT, expr
#line 172 "tablemap.y"
                               { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.LSHIFT }; }
#line default
        break;
      case 69: // expr7a -> expr8, RSHIFT, expr
#line 173 "tablemap.y"
                          { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.RSHIFT }; }
#line default
        break;
      case 70: // expr7a -> expr8
#line 174 "tablemap.y"
                 { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 71: // expr8 -> expr9, PLUS, expr8
#line 177 "tablemap.y"
                             { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.PLUS }; }
#line default
        break;
      case 72: // expr8 -> expr9, MINUS, expr8
#line 178 "tablemap.y"
                          { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.MINUS }; }
#line default
        break;
      case 73: // expr8 -> expr9
#line 179 "tablemap.y"
                 { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 74: // expr9 -> expr10, MUL, expr9
#line 182 "tablemap.y"
                             { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-3].exprval, b = ValueStack[ValueStack.Depth-1].exprval, op = Tokens.MUL }; }
#line default
        break;
      case 75: // expr9 -> expr10
#line 183 "tablemap.y"
                  { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 76: // expr10 -> NOT, expr10
#line 186 "tablemap.y"
                          { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-1].exprval, b = null, op = Tokens.NOT }; }
#line default
        break;
      case 77: // expr10 -> MINUS, expr10
#line 187 "tablemap.y"
                      { CurrentSemanticValue.exprval = new Expression { a = ValueStack[ValueStack.Depth-1].exprval, b = null, op = Tokens.MINUS }; }
#line default
        break;
      case 78: // expr10 -> expr11
#line 188 "tablemap.y"
                  { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 79: // expr11 -> strlabelexpr
#line 191 "tablemap.y"
                           { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 80: // expr11 -> INT
#line 192 "tablemap.y"
                { CurrentSemanticValue.exprval = new IntExpression { val = ValueStack[ValueStack.Depth-1].intval }; }
#line default
        break;
      case 81: // expr11 -> arrayexpr
#line 193 "tablemap.y"
                    { CurrentSemanticValue.exprval = new ArrayExpression { val = ValueStack[ValueStack.Depth-1].exprlist }; }
#line default
        break;
      case 82: // expr11 -> objexpr
#line 194 "tablemap.y"
                   { CurrentSemanticValue.exprval = new ObjExpression { val = ValueStack[ValueStack.Depth-1].objdeflist }; }
#line default
        break;
      case 83: // expr11 -> funcrefexpr
#line 195 "tablemap.y"
                      { CurrentSemanticValue.exprval = ValueStack[ValueStack.Depth-1].exprval; }
#line default
        break;
      case 84: // funcrefexpr -> FUNCREF, LABEL, LPAREN, typelist, RPAREN
#line 198 "tablemap.y"
                                                   { CurrentSemanticValue.exprval = new FunctionRefExpression { name = ValueStack[ValueStack.Depth-4].strval, args = ValueStack[ValueStack.Depth-2].typelistval }; }
#line default
        break;
      case 85: // typelist -> typelist, COMMA, argtype
#line 201 "tablemap.y"
                                    { CurrentSemanticValue.typelistval = new List<Expression.EvalResult.ResultType>(ValueStack[ValueStack.Depth-3].typelistval); CurrentSemanticValue.typelistval.Add(ValueStack[ValueStack.Depth-1].typeval); }
#line default
        break;
      case 86: // typelist -> argtype
#line 202 "tablemap.y"
                   { CurrentSemanticValue.typelistval = new List<Expression.EvalResult.ResultType>(); CurrentSemanticValue.typelistval.Add(ValueStack[ValueStack.Depth-1].typeval); }
#line default
        break;
      case 87: // typelist -> /* empty */
#line 203 "tablemap.y"
             { CurrentSemanticValue.typelistval = new List<Expression.EvalResult.ResultType>(); }
#line default
        break;
      case 88: // arrayexpr -> LBRACK, exprlist, RBRACK
#line 206 "tablemap.y"
                                     { CurrentSemanticValue.exprlist = ValueStack[ValueStack.Depth-2].exprlist; }
#line default
        break;
      case 89: // arrayexpr -> LBRACK, exprlist, COMMA, RBRACK
#line 207 "tablemap.y"
                                  { CurrentSemanticValue.exprlist = ValueStack[ValueStack.Depth-3].exprlist; }
#line default
        break;
      case 90: // arglist -> arglist, COMMA, arg
#line 210 "tablemap.y"
                                { CurrentSemanticValue.arglistval = new List<FunctionStatement.FunctionArg>(ValueStack[ValueStack.Depth-3].arglistval); CurrentSemanticValue.arglistval.Add(ValueStack[ValueStack.Depth-1].argval); }
#line default
        break;
      case 91: // arglist -> arg
#line 211 "tablemap.y"
                { CurrentSemanticValue.arglistval = new List<FunctionStatement.FunctionArg>(); CurrentSemanticValue.arglistval.Add(ValueStack[ValueStack.Depth-1].argval); }
#line default
        break;
      case 92: // arglist -> /* empty */
#line 212 "tablemap.y"
             { CurrentSemanticValue.arglistval = new List<FunctionStatement.FunctionArg>(); }
#line default
        break;
      case 93: // objexpr -> LBRACK, objlist, RBRACK
#line 215 "tablemap.y"
                                   { CurrentSemanticValue.objdeflist = ValueStack[ValueStack.Depth-2].objdeflist; }
#line default
        break;
      case 94: // objexpr -> LBRACK, objlist, COMMA, RBRACK
#line 216 "tablemap.y"
                                  { CurrentSemanticValue.objdeflist = ValueStack[ValueStack.Depth-3].objdeflist; }
#line default
        break;
      case 95: // objlist -> objmember
#line 219 "tablemap.y"
                          { CurrentSemanticValue.objdeflist = new List<ObjDef> { ValueStack[ValueStack.Depth-1].objdefval }; }
#line default
        break;
      case 96: // objlist -> objlist, COMMA, objmember
#line 220 "tablemap.y"
                               { ValueStack[ValueStack.Depth-3].objdeflist.Add(ValueStack[ValueStack.Depth-1].objdefval); CurrentSemanticValue.objdeflist = ValueStack[ValueStack.Depth-3].objdeflist; }
#line default
        break;
      case 97: // objmember -> LABEL, ASSIGN, expr
#line 223 "tablemap.y"
                                 { CurrentSemanticValue.objdefval = new ObjDef { name = ValueStack[ValueStack.Depth-3].strval, val = ValueStack[ValueStack.Depth-1].exprval }; }
#line default
        break;
      case 98: // argtype -> INTEGER
#line 227 "tablemap.y"
                         { CurrentSemanticValue.typeval = Expression.EvalResult.ResultType.Int; }
#line default
        break;
      case 99: // argtype -> STRING
#line 228 "tablemap.y"
                  { CurrentSemanticValue.typeval = Expression.EvalResult.ResultType.String; }
#line default
        break;
      case 100: // argtype -> ARRAY
#line 229 "tablemap.y"
                 { CurrentSemanticValue.typeval = Expression.EvalResult.ResultType.Array; }
#line default
        break;
      case 101: // argtype -> OBJECT
#line 230 "tablemap.y"
                  { CurrentSemanticValue.typeval = Expression.EvalResult.ResultType.Object; }
#line default
        break;
      case 102: // argtype -> VOID
#line 231 "tablemap.y"
                { CurrentSemanticValue.typeval = Expression.EvalResult.ResultType.Void; }
#line default
        break;
      case 103: // argtype -> FUNCTION
#line 232 "tablemap.y"
                   { CurrentSemanticValue.typeval = Expression.EvalResult.ResultType.Function; }
#line default
        break;
      case 104: // arg -> argtype, LABEL
#line 235 "tablemap.y"
                          { CurrentSemanticValue.argval = new FunctionStatement.FunctionArg { name = ValueStack[ValueStack.Depth-1].strval, argtype = ValueStack[ValueStack.Depth-2].typeval }; }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 239 "tablemap.y"

internal Statement output;
#line default
}
}

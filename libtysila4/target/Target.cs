/* D:\tysos\branches\tysila3\libtysila4\target\Target.cs
 * This is an auto-generated file
 * DO NOT EDIT
 * It was generated at 19:29:52 on 25 August 2016
 * from D:\tysos\branches\tysila3\libtysila4\target\Target.td
 * by TableMap (part of tysos: http://www.tysos.org)
 * Please edit the source file, rather than this file, to make any changes
 */

namespace libtysila4.target
{
	partial class Target
	{
		public const int rt_gpr = 0;
		public const int rt_float = 1;
		public const int rt_stack = 2;
		public const int rt_contents = 3;
		public const int rt_multi = 4;
		
		internal static void init_rtmap()
		{
			rt_map[0] = "gpr";
			rt_map[1] = "float";
			rt_map[2] = "stack";
			rt_map[3] = "contents";
			rt_map[4] = "multi";
		}
	}
}

namespace libtysila4.target
{
	partial class Target
	{
		public const int pt_def = 5;
		public const int pt_use = 6;
		public const int pt_cc = 7;
		public const int pt_icc = 8;
		public const int pt_br = 9;
		public const int pt_mc = 10;
		public const int pt_tu = 11;
		public const int pt_td = 12;
		
		internal static void init_pt()
		{
			pt_names[5] = "def";
			pt_names[6] = "use";
			pt_names[7] = "cc";
			pt_names[8] = "icc";
			pt_names[9] = "br";
			pt_names[10] = "mc";
			pt_names[11] = "tu";
			pt_names[12] = "td";
		}
	}
}

namespace libtysila4.target
{
	partial class Generic
	{
		public const int g_phi = 13;
		public const int g_precall = 14;
		public const int g_postcall = 15;
		public const int g_setupstack = 16;
		public const int g_savecalleepreserves = 17;
		public const int g_restorecalleepreserves = 18;
		
		internal static void init_instrs()
		{
			insts[13] = "phi";
			insts[14] = "precall";
			insts[15] = "postcall";
			insts[16] = "setupstack";
			insts[17] = "savecalleepreserves";
			insts[18] = "restorecalleepreserves";
		}
	}
}

namespace libtysila4.target.x86
{
	partial class x86_Assembler
	{
		public static System.Collections.Generic.Dictionary<int, int> ct_map = new System.Collections.Generic.Dictionary<int, int>(new libtysila4.GenericEqualityComparer<int>());
		internal static void init_ctmap()
		{
			ct_map[0] = 505;
			ct_map[2] = 505;
			ct_map[1] = 1;
		}
	}
}

namespace libtysila4.target.x86
{
	partial class x86_Assembler
	{
		public const int x86_mov = 19;
		public const int x86_cmp = 20;
		public const int x86_set = 21;
		public const int x86_movsx = 22;
		public const int x86_br = 23;
		public const int x86_bcc = 24;
		public const int x86_call = 25;
		public const int x86_ret = 26;
		public const int x86_pop = 27;
		public const int x86_push = 28;
		
		internal static void init_instrs()
		{
			insts[19] = "mov";
			insts[20] = "cmp";
			insts[21] = "set";
			insts[22] = "movsx";
			insts[23] = "br";
			insts[24] = "bcc";
			insts[25] = "call";
			insts[26] = "ret";
			insts[27] = "pop";
			insts[28] = "push";
		}
	}
}

namespace libtysila4.target.x86
{
	partial class x86_Assembler
	{
		public static System.Collections.Generic.Dictionary<int, int[]> cc_map_sysv = new System.Collections.Generic.Dictionary<int, int[]>(new libtysila4.GenericEqualityComparer<int>());
		internal static void init_sysv()
		{
			cc_map_sysv[44] = new int[] { 0, };
			cc_map_sysv[45] = new int[] { 0, };
		}
		
		internal const ulong sysv_caller_preserves = 104;
		internal const ulong sysv_callee_preserves = 400;
	}
}

namespace libtysila4.target.x86
{
	partial class x86_Assembler
	{
		public static System.Collections.Generic.Dictionary<int, int[]> cc_map_ret_sysv = new System.Collections.Generic.Dictionary<int, int[]>(new libtysila4.GenericEqualityComparer<int>());
		internal static void init_ret_sysv()
		{
			cc_map_ret_sysv[44] = new int[] { 3, };
			cc_map_ret_sysv[45] = new int[] { 11, };
		}
		
		internal const ulong ret_sysv_caller_preserves = 0;
		internal const ulong ret_sysv_callee_preserves = 0;
	}
}

namespace libtysila4.target.x86
{
	partial class x86_Assembler
	{
		public static System.Collections.Generic.Dictionary<string, ulong> cc_caller_preserves_map = new System.Collections.Generic.Dictionary<string, ulong>(new libtysila4.GenericEqualityComparer<string>());
		internal static void init_cc_caller_preserves_map()
		{
			cc_caller_preserves_map["sysv"] = sysv_caller_preserves;
		}
	}
}

namespace libtysila4.target.x86
{
	partial class x86_Assembler
	{
		public static System.Collections.Generic.Dictionary<string, ulong> cc_callee_preserves_map = new System.Collections.Generic.Dictionary<string, ulong>(new libtysila4.GenericEqualityComparer<string>());
		internal static void init_cc_callee_preserves_map()
		{
			cc_callee_preserves_map["sysv"] = sysv_callee_preserves;
		}
	}
}

namespace libtysila4.target.x86
{
	partial class x86_Assembler
	{
		public static System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<int, int[]>> cc_map = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<int, int[]>>(new libtysila4.GenericEqualityComparer<string>());
		internal static void init_cc_map()
		{
			cc_map["sysv"] = cc_map_sysv;
		}
	}
}

namespace libtysila4.target.x86
{
	partial class x86_Assembler
	{
		public static System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<int, int[]>> retcc_map = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<int, int[]>>(new libtysila4.GenericEqualityComparer<string>());
		internal static void init_retcc_map()
		{
			retcc_map["ret_sysv"] = cc_map_ret_sysv;
		}
	}
}

namespace libtysila4.target
{
	public partial class Generic
	{
		public static System.Collections.Generic.Dictionary<int, string> insts = new System.Collections.Generic.Dictionary<int, string>(new libtysila4.GenericEqualityComparer<int>());
	}
	
	public partial class Target
	{
		public static void init_targets()
		{
			libtysila4.target.Generic.init_instrs();
			
			var x86_instrs = new HashTable {
				nbucket = 11,
				nchain = 143,
				bucket = new int[] {
					130, 119, 125, 139, 124, 127, 141, 131, 
					140, 142, 132, 
				},
				chain = new int[] {
					-1, -1, -1, -1, -1, -1, 0, -1, 
					1, 4, -1, 5, 10, 11, -1, 6, 
					7, 8, 13, 14, -1, 2, 17, 21, 
					-1, 18, 12, 25, 19, 22, 3, 9, 
					26, 15, 16, 29, 23, 32, 31, 37, 
					27, 34, 33, 41, 35, 38, 28, 20, 
					42, 24, 30, 45, 39, 48, 47, 53, 
					43, 50, 49, 57, 51, 54, 44, 36, 
					58, 40, 61, 55, 56, 59, 64, 69, 
					60, 66, 46, 73, 67, 70, 52, 65, 
					74, 62, 71, 81, 77, 82, 78, 79, 
					75, 88, 68, 83, 84, 85, 86, 91, 
					92, 87, 89, 72, 97, 90, 63, 98, 
					101, 93, 94, 104, 99, 76, 106, 107, 
					108, 111, 109, 96, 102, 110, 112, 100, 
					95, 117, 113, 118, 114, 80, 122, 126, 
					115, 128, 121, 116, 123, 105, 103, 129, 
					120, 133, 137, 134, 135, 136, 138, 
				},
				idx_map = new int[] {
					0, 21, 42, 63, 84, 105, 126, 147, 
					168, 189, 210, 231, 252, 271, 290, 309, 
					328, 347, 366, 397, 428, 459, 490, 521, 
					552, 583, 614, 645, 676, 707, 738, 769, 
					800, 831, 862, 893, 924, 955, 986, 1017, 
					1048, 1079, 1110, 1141, 1172, 1203, 1234, 1265, 
					1296, 1327, 1358, 1389, 1420, 1451, 1482, 1513, 
					1544, 1575, 1606, 1637, 1668, 1699, 1730, 1761, 
					1792, 1823, 1854, 1885, 1916, 1947, 1978, 2009, 
					2040, 2071, 2102, 2133, 2164, 2195, 2226, 2257, 
					2288, 2319, 2350, 2358, 2396, 2434, 2472, 2510, 
					2548, 2586, 2624, 2662, 2700, 2738, 2776, 2814, 
					2852, 2890, 2928, 2966, 3004, 3042, 3080, 3118, 
					3156, 3194, 3232, 3270, 3298, 3326, 3354, 3382, 
					3410, 3438, 3466, 3494, 3522, 3550, 3578, 3606, 
					3633, 3660, 3687, 3714, 3741, 3768, 3795, 3822, 
					3849, 3876, 3903, 3930, 3949, 3960, 3974, 3988, 
					4002, 4016, 4030, 4044, 4058, 4072, 4086, 
				},
				data = new byte[] {
					5, 19, 1, 0, 1, 0, 1, 3, 10, 19, 5, 0, 6, 0, 1, 129, 
					251, 1, 129, 248, 0, 5, 19, 1, 0, 1, 2, 1, 3, 10, 19, 5, 
					0, 6, 0, 1, 129, 251, 1, 129, 248, 0, 5, 19, 1, 1, 1, 0, 
					1, 3, 10, 19, 5, 0, 6, 0, 1, 129, 251, 1, 129, 248, 0, 5, 
					19, 1, 1, 1, 2, 1, 3, 10, 19, 5, 0, 6, 0, 1, 129, 251, 
					1, 129, 248, 0, 5, 19, 1, 2, 1, 0, 1, 3, 10, 19, 5, 0, 
					6, 0, 1, 129, 251, 1, 129, 248, 0, 5, 19, 1, 2, 1, 2, 1, 
					3, 10, 19, 5, 0, 6, 0, 1, 129, 251, 1, 129, 248, 0, 5, 19, 
					1, 0, 1, 0, 1, 3, 10, 19, 5, 0, 6, 0, 1, 129, 248, 1, 
					129, 251, 0, 5, 19, 1, 0, 1, 1, 1, 3, 10, 19, 5, 0, 6, 
					0, 1, 129, 248, 1, 129, 251, 0, 5, 19, 1, 0, 1, 2, 1, 3, 
					10, 19, 5, 0, 6, 0, 1, 129, 248, 1, 129, 251, 0, 5, 19, 1, 
					2, 1, 0, 1, 3, 10, 19, 5, 0, 6, 0, 1, 129, 248, 1, 129, 
					251, 0, 5, 19, 1, 2, 1, 1, 1, 3, 10, 19, 5, 0, 6, 0, 
					1, 129, 248, 1, 129, 251, 0, 5, 19, 1, 2, 1, 2, 1, 3, 10, 
					19, 5, 0, 6, 0, 1, 129, 248, 1, 129, 251, 0, 5, 19, 1, 6, 
					1, 0, 1, 3, 10, 19, 5, 0, 6, 0, 0, 1, 129, 251, 0, 5, 
					19, 1, 6, 1, 1, 1, 3, 10, 19, 5, 0, 6, 0, 0, 1, 129, 
					251, 0, 5, 19, 1, 6, 1, 2, 1, 3, 10, 19, 5, 0, 6, 0, 
					0, 1, 129, 251, 0, 5, 19, 1, 11, 1, 0, 1, 3, 10, 19, 5, 
					0, 6, 0, 0, 1, 129, 251, 0, 5, 19, 1, 11, 1, 1, 1, 3, 
					10, 19, 5, 0, 6, 0, 0, 1, 129, 251, 0, 5, 19, 1, 11, 1, 
					2, 1, 3, 10, 19, 5, 0, 6, 0, 0, 1, 129, 251, 0, 6, 19, 
					1, 0, 2, 0, 0, 2, 3, 10, 19, 5, 0, 6, 0, 3, 10, 19, 
					5, 1, 6, 0, 1, 129, 251, 2, 129, 251, 129, 251, 0, 6, 19, 1, 
					0, 2, 0, 1, 2, 3, 10, 19, 5, 0, 6, 0, 3, 10, 19, 5, 
					1, 6, 0, 1, 129, 251, 2, 129, 251, 129, 251, 0, 6, 19, 1, 0, 
					2, 0, 2, 2, 3, 10, 19, 5, 0, 6, 0, 3, 10, 19, 5, 1, 
					6, 0, 1, 129, 251, 2, 129, 251, 129, 251, 0, 6, 19, 1, 0, 2, 
					0, 6, 2, 3, 10, 19, 5, 0, 6, 0, 3, 10, 19, 5, 1, 6, 
					0, 1, 129, 251, 2, 129, 251, 129, 251, 0, 6, 19, 1, 0, 2, 1, 
					0, 2, 3, 10, 19, 5, 0, 6, 0, 3, 10, 19, 5, 1, 6, 0, 
					1, 129, 251, 2, 129, 251, 129, 251, 0, 6, 19, 1, 0, 2, 1, 1, 
					2, 3, 10, 19, 5, 0, 6, 0, 3, 10, 19, 5, 1, 6, 0, 1, 
					129, 251, 2, 129, 251, 129, 251, 0, 6, 19, 1, 0, 2, 1, 2, 2, 
					3, 10, 19, 5, 0, 6, 0, 3, 10, 19, 5, 1, 6, 0, 1, 129, 
					251, 2, 129, 251, 129, 251, 0, 6, 19, 1, 0, 2, 1, 6, 2, 3, 
					10, 19, 5, 0, 6, 0, 3, 10, 19, 5, 1, 6, 0, 1, 129, 251, 
					2, 129, 251, 129, 251, 0, 6, 19, 1, 0, 2, 2, 0, 2, 3, 10, 
					19, 5, 0, 6, 0, 3, 10, 19, 5, 1, 6, 0, 1, 129, 251, 2, 
					129, 251, 129, 251, 0, 6, 19, 1, 0, 2, 2, 1, 2, 3, 10, 19, 
					5, 0, 6, 0, 3, 10, 19, 5, 1, 6, 0, 1, 129, 251, 2, 129, 
					251, 129, 251, 0, 6, 19, 1, 0, 2, 2, 2, 2, 3, 10, 19, 5, 
					0, 6, 0, 3, 10, 19, 5, 1, 6, 0, 1, 129, 251, 2, 129, 251, 
					129, 251, 0, 6, 19, 1, 0, 2, 2, 6, 2, 3, 10, 19, 5, 0, 
					6, 0, 3, 10, 19, 5, 1, 6, 0, 1, 129, 251, 2, 129, 251, 129, 
					251, 0, 6, 19, 1, 0, 2, 6, 0, 2, 3, 10, 19, 5, 0, 6, 
					0, 3, 10, 19, 5, 1, 6, 0, 1, 129, 251, 2, 129, 251, 129, 251, 
					0, 6, 19, 1, 0, 2, 6, 1, 2, 3, 10, 19, 5, 0, 6, 0, 
					3, 10, 19, 5, 1, 6, 0, 1, 129, 251, 2, 129, 251, 129, 251, 0, 
					6, 19, 1, 0, 2, 6, 2, 2, 3, 10, 19, 5, 0, 6, 0, 3, 
					10, 19, 5, 1, 6, 0, 1, 129, 251, 2, 129, 251, 129, 251, 0, 6, 
					19, 1, 0, 2, 6, 6, 2, 3, 10, 19, 5, 0, 6, 0, 3, 10, 
					19, 5, 1, 6, 0, 1, 129, 251, 2, 129, 251, 129, 251, 0, 6, 19, 
					1, 1, 2, 0, 0, 2, 3, 10, 19, 5, 0, 6, 0, 3, 10, 19, 
					5, 1, 6, 0, 1, 129, 251, 2, 129, 251, 129, 251, 0, 6, 19, 1, 
					1, 2, 0, 1, 2, 3, 10, 19, 5, 0, 6, 0, 3, 10, 19, 5, 
					1, 6, 0, 1, 129, 251, 2, 129, 251, 129, 251, 0, 6, 19, 1, 1, 
					2, 0, 2, 2, 3, 10, 19, 5, 0, 6, 0, 3, 10, 19, 5, 1, 
					6, 0, 1, 129, 251, 2, 129, 251, 129, 251, 0, 6, 19, 1, 1, 2, 
					0, 6, 2, 3, 10, 19, 5, 0, 6, 0, 3, 10, 19, 5, 1, 6, 
					0, 1, 129, 251, 2, 129, 251, 129, 251, 0, 6, 19, 1, 1, 2, 1, 
					0, 2, 3, 10, 19, 5, 0, 6, 0, 3, 10, 19, 5, 1, 6, 0, 
					1, 129, 251, 2, 129, 251, 129, 251, 0, 6, 19, 1, 1, 2, 1, 1, 
					2, 3, 10, 19, 5, 0, 6, 0, 3, 10, 19, 5, 1, 6, 0, 1, 
					129, 251, 2, 129, 251, 129, 251, 0, 6, 19, 1, 1, 2, 1, 2, 2, 
					3, 10, 19, 5, 0, 6, 0, 3, 10, 19, 5, 1, 6, 0, 1, 129, 
					251, 2, 129, 251, 129, 251, 0, 6, 19, 1, 1, 2, 1, 6, 2, 3, 
					10, 19, 5, 0, 6, 0, 3, 10, 19, 5, 1, 6, 0, 1, 129, 251, 
					2, 129, 251, 129, 251, 0, 6, 19, 1, 1, 2, 2, 0, 2, 3, 10, 
					19, 5, 0, 6, 0, 3, 10, 19, 5, 1, 6, 0, 1, 129, 251, 2, 
					129, 251, 129, 251, 0, 6, 19, 1, 1, 2, 2, 1, 2, 3, 10, 19, 
					5, 0, 6, 0, 3, 10, 19, 5, 1, 6, 0, 1, 129, 251, 2, 129, 
					251, 129, 251, 0, 6, 19, 1, 1, 2, 2, 2, 2, 3, 10, 19, 5, 
					0, 6, 0, 3, 10, 19, 5, 1, 6, 0, 1, 129, 251, 2, 129, 251, 
					129, 251, 0, 6, 19, 1, 1, 2, 2, 6, 2, 3, 10, 19, 5, 0, 
					6, 0, 3, 10, 19, 5, 1, 6, 0, 1, 129, 251, 2, 129, 251, 129, 
					251, 0, 6, 19, 1, 1, 2, 6, 0, 2, 3, 10, 19, 5, 0, 6, 
					0, 3, 10, 19, 5, 1, 6, 0, 1, 129, 251, 2, 129, 251, 129, 251, 
					0, 6, 19, 1, 1, 2, 6, 1, 2, 3, 10, 19, 5, 0, 6, 0, 
					3, 10, 19, 5, 1, 6, 0, 1, 129, 251, 2, 129, 251, 129, 251, 0, 
					6, 19, 1, 1, 2, 6, 2, 2, 3, 10, 19, 5, 0, 6, 0, 3, 
					10, 19, 5, 1, 6, 0, 1, 129, 251, 2, 129, 251, 129, 251, 0, 6, 
					19, 1, 1, 2, 6, 6, 2, 3, 10, 19, 5, 0, 6, 0, 3, 10, 
					19, 5, 1, 6, 0, 1, 129, 251, 2, 129, 251, 129, 251, 0, 6, 19, 
					1, 2, 2, 0, 0, 2, 3, 10, 19, 5, 0, 6, 0, 3, 10, 19, 
					5, 1, 6, 0, 1, 129, 251, 2, 129, 251, 129, 251, 0, 6, 19, 1, 
					2, 2, 0, 1, 2, 3, 10, 19, 5, 0, 6, 0, 3, 10, 19, 5, 
					1, 6, 0, 1, 129, 251, 2, 129, 251, 129, 251, 0, 6, 19, 1, 2, 
					2, 0, 2, 2, 3, 10, 19, 5, 0, 6, 0, 3, 10, 19, 5, 1, 
					6, 0, 1, 129, 251, 2, 129, 251, 129, 251, 0, 6, 19, 1, 2, 2, 
					0, 6, 2, 3, 10, 19, 5, 0, 6, 0, 3, 10, 19, 5, 1, 6, 
					0, 1, 129, 251, 2, 129, 251, 129, 251, 0, 6, 19, 1, 2, 2, 1, 
					0, 2, 3, 10, 19, 5, 0, 6, 0, 3, 10, 19, 5, 1, 6, 0, 
					1, 129, 251, 2, 129, 251, 129, 251, 0, 6, 19, 1, 2, 2, 1, 1, 
					2, 3, 10, 19, 5, 0, 6, 0, 3, 10, 19, 5, 1, 6, 0, 1, 
					129, 251, 2, 129, 251, 129, 251, 0, 6, 19, 1, 2, 2, 1, 2, 2, 
					3, 10, 19, 5, 0, 6, 0, 3, 10, 19, 5, 1, 6, 0, 1, 129, 
					251, 2, 129, 251, 129, 251, 0, 6, 19, 1, 2, 2, 1, 6, 2, 3, 
					10, 19, 5, 0, 6, 0, 3, 10, 19, 5, 1, 6, 0, 1, 129, 251, 
					2, 129, 251, 129, 251, 0, 6, 19, 1, 2, 2, 2, 0, 2, 3, 10, 
					19, 5, 0, 6, 0, 3, 10, 19, 5, 1, 6, 0, 1, 129, 251, 2, 
					129, 251, 129, 251, 0, 6, 19, 1, 2, 2, 2, 1, 2, 3, 10, 19, 
					5, 0, 6, 0, 3, 10, 19, 5, 1, 6, 0, 1, 129, 251, 2, 129, 
					251, 129, 251, 0, 6, 19, 1, 2, 2, 2, 2, 2, 3, 10, 19, 5, 
					0, 6, 0, 3, 10, 19, 5, 1, 6, 0, 1, 129, 251, 2, 129, 251, 
					129, 251, 0, 6, 19, 1, 2, 2, 2, 6, 2, 3, 10, 19, 5, 0, 
					6, 0, 3, 10, 19, 5, 1, 6, 0, 1, 129, 251, 2, 129, 251, 129, 
					251, 0, 6, 19, 1, 2, 2, 6, 0, 2, 3, 10, 19, 5, 0, 6, 
					0, 3, 10, 19, 5, 1, 6, 0, 1, 129, 251, 2, 129, 251, 129, 251, 
					0, 6, 19, 1, 2, 2, 6, 1, 2, 3, 10, 19, 5, 0, 6, 0, 
					3, 10, 19, 5, 1, 6, 0, 1, 129, 251, 2, 129, 251, 129, 251, 0, 
					6, 19, 1, 2, 2, 6, 2, 2, 3, 10, 19, 5, 0, 6, 0, 3, 
					10, 19, 5, 1, 6, 0, 1, 129, 251, 2, 129, 251, 129, 251, 0, 6, 
					19, 1, 2, 2, 6, 6, 2, 3, 10, 19, 5, 0, 6, 0, 3, 10, 
					19, 5, 1, 6, 0, 1, 129, 251, 2, 129, 251, 129, 251, 0, 6, 19, 
					1, 6, 2, 0, 0, 2, 3, 10, 19, 5, 0, 6, 0, 3, 10, 19, 
					5, 1, 6, 0, 1, 129, 251, 2, 129, 251, 129, 251, 0, 6, 19, 1, 
					6, 2, 0, 1, 2, 3, 10, 19, 5, 0, 6, 0, 3, 10, 19, 5, 
					1, 6, 0, 1, 129, 251, 2, 129, 251, 129, 251, 0, 6, 19, 1, 6, 
					2, 0, 2, 2, 3, 10, 19, 5, 0, 6, 0, 3, 10, 19, 5, 1, 
					6, 0, 1, 129, 251, 2, 129, 251, 129, 251, 0, 6, 19, 1, 6, 2, 
					0, 6, 2, 3, 10, 19, 5, 0, 6, 0, 3, 10, 19, 5, 1, 6, 
					0, 1, 129, 251, 2, 129, 251, 129, 251, 0, 6, 19, 1, 6, 2, 1, 
					0, 2, 3, 10, 19, 5, 0, 6, 0, 3, 10, 19, 5, 1, 6, 0, 
					1, 129, 251, 2, 129, 251, 129, 251, 0, 6, 19, 1, 6, 2, 1, 1, 
					2, 3, 10, 19, 5, 0, 6, 0, 3, 10, 19, 5, 1, 6, 0, 1, 
					129, 251, 2, 129, 251, 129, 251, 0, 6, 19, 1, 6, 2, 1, 2, 2, 
					3, 10, 19, 5, 0, 6, 0, 3, 10, 19, 5, 1, 6, 0, 1, 129, 
					251, 2, 129, 251, 129, 251, 0, 6, 19, 1, 6, 2, 1, 6, 2, 3, 
					10, 19, 5, 0, 6, 0, 3, 10, 19, 5, 1, 6, 0, 1, 129, 251, 
					2, 129, 251, 129, 251, 0, 6, 19, 1, 6, 2, 2, 0, 2, 3, 10, 
					19, 5, 0, 6, 0, 3, 10, 19, 5, 1, 6, 0, 1, 129, 251, 2, 
					129, 251, 129, 251, 0, 6, 19, 1, 6, 2, 2, 1, 2, 3, 10, 19, 
					5, 0, 6, 0, 3, 10, 19, 5, 1, 6, 0, 1, 129, 251, 2, 129, 
					251, 129, 251, 0, 6, 19, 1, 6, 2, 2, 2, 2, 3, 10, 19, 5, 
					0, 6, 0, 3, 10, 19, 5, 1, 6, 0, 1, 129, 251, 2, 129, 251, 
					129, 251, 0, 6, 19, 1, 6, 2, 2, 6, 2, 3, 10, 19, 5, 0, 
					6, 0, 3, 10, 19, 5, 1, 6, 0, 1, 129, 251, 2, 129, 251, 129, 
					251, 0, 6, 19, 1, 6, 2, 6, 0, 2, 3, 10, 19, 5, 0, 6, 
					0, 3, 10, 19, 5, 1, 6, 0, 1, 129, 251, 2, 129, 251, 129, 251, 
					0, 6, 19, 1, 6, 2, 6, 1, 2, 3, 10, 19, 5, 0, 6, 0, 
					3, 10, 19, 5, 1, 6, 0, 1, 129, 251, 2, 129, 251, 129, 251, 0, 
					6, 19, 1, 6, 2, 6, 2, 2, 3, 10, 19, 5, 0, 6, 0, 3, 
					10, 19, 5, 1, 6, 0, 1, 129, 251, 2, 129, 251, 129, 251, 0, 6, 
					19, 1, 6, 2, 6, 6, 2, 3, 10, 19, 5, 0, 6, 0, 3, 10, 
					19, 5, 1, 6, 0, 1, 129, 251, 2, 129, 251, 129, 251, 0, 3, 25, 
					0, 0, 0, 0, 0, 0, 6, 27, 2, 0, 0, 1, 0, 3, 3, 10, 
					20, 6, 0, 6, 1, 3, 10, 21, 7, 0, 12, 0, 3, 10, 22, 5, 
					0, 11, 0, 2, 129, 248, 129, 251, 1, 129, 248, 0, 6, 27, 2, 0, 
					0, 1, 2, 3, 3, 10, 20, 6, 0, 6, 1, 3, 10, 21, 7, 0, 
					12, 0, 3, 10, 22, 5, 0, 11, 0, 2, 129, 248, 129, 251, 1, 129, 
					248, 0, 6, 27, 2, 0, 1, 1, 0, 3, 3, 10, 20, 6, 0, 6, 
					1, 3, 10, 21, 7, 0, 12, 0, 3, 10, 22, 5, 0, 11, 0, 2, 
					129, 248, 129, 251, 1, 129, 248, 0, 6, 27, 2, 0, 1, 1, 2, 3, 
					3, 10, 20, 6, 0, 6, 1, 3, 10, 21, 7, 0, 12, 0, 3, 10, 
					22, 5, 0, 11, 0, 2, 129, 248, 129, 251, 1, 129, 248, 0, 6, 27, 
					2, 0, 2, 1, 0, 3, 3, 10, 20, 6, 0, 6, 1, 3, 10, 21, 
					7, 0, 12, 0, 3, 10, 22, 5, 0, 11, 0, 2, 129, 248, 129, 251, 
					1, 129, 248, 0, 6, 27, 2, 0, 2, 1, 2, 3, 3, 10, 20, 6, 
					0, 6, 1, 3, 10, 21, 7, 0, 12, 0, 3, 10, 22, 5, 0, 11, 
					0, 2, 129, 248, 129, 251, 1, 129, 248, 0, 6, 27, 2, 2, 0, 1, 
					0, 3, 3, 10, 20, 6, 0, 6, 1, 3, 10, 21, 7, 0, 12, 0, 
					3, 10, 22, 5, 0, 11, 0, 2, 129, 248, 129, 251, 1, 129, 248, 0, 
					6, 27, 2, 2, 0, 1, 2, 3, 3, 10, 20, 6, 0, 6, 1, 3, 
					10, 21, 7, 0, 12, 0, 3, 10, 22, 5, 0, 11, 0, 2, 129, 248, 
					129, 251, 1, 129, 248, 0, 6, 27, 2, 2, 1, 1, 0, 3, 3, 10, 
					20, 6, 0, 6, 1, 3, 10, 21, 7, 0, 12, 0, 3, 10, 22, 5, 
					0, 11, 0, 2, 129, 248, 129, 251, 1, 129, 248, 0, 6, 27, 2, 2, 
					1, 1, 2, 3, 3, 10, 20, 6, 0, 6, 1, 3, 10, 21, 7, 0, 
					12, 0, 3, 10, 22, 5, 0, 11, 0, 2, 129, 248, 129, 251, 1, 129, 
					248, 0, 6, 27, 2, 2, 2, 1, 0, 3, 3, 10, 20, 6, 0, 6, 
					1, 3, 10, 21, 7, 0, 12, 0, 3, 10, 22, 5, 0, 11, 0, 2, 
					129, 248, 129, 251, 1, 129, 248, 0, 6, 27, 2, 2, 2, 1, 2, 3, 
					3, 10, 20, 6, 0, 6, 1, 3, 10, 21, 7, 0, 12, 0, 3, 10, 
					22, 5, 0, 11, 0, 2, 129, 248, 129, 251, 1, 129, 248, 0, 6, 27, 
					2, 0, 0, 1, 0, 3, 3, 10, 20, 6, 0, 6, 1, 3, 10, 21, 
					7, 0, 12, 0, 3, 10, 22, 5, 0, 11, 0, 2, 129, 251, 129, 248, 
					1, 129, 248, 0, 6, 27, 2, 0, 0, 1, 2, 3, 3, 10, 20, 6, 
					0, 6, 1, 3, 10, 21, 7, 0, 12, 0, 3, 10, 22, 5, 0, 11, 
					0, 2, 129, 251, 129, 248, 1, 129, 248, 0, 6, 27, 2, 0, 2, 1, 
					0, 3, 3, 10, 20, 6, 0, 6, 1, 3, 10, 21, 7, 0, 12, 0, 
					3, 10, 22, 5, 0, 11, 0, 2, 129, 251, 129, 248, 1, 129, 248, 0, 
					6, 27, 2, 0, 2, 1, 2, 3, 3, 10, 20, 6, 0, 6, 1, 3, 
					10, 21, 7, 0, 12, 0, 3, 10, 22, 5, 0, 11, 0, 2, 129, 251, 
					129, 248, 1, 129, 248, 0, 6, 27, 2, 1, 0, 1, 0, 3, 3, 10, 
					20, 6, 0, 6, 1, 3, 10, 21, 7, 0, 12, 0, 3, 10, 22, 5, 
					0, 11, 0, 2, 129, 251, 129, 248, 1, 129, 248, 0, 6, 27, 2, 1, 
					0, 1, 2, 3, 3, 10, 20, 6, 0, 6, 1, 3, 10, 21, 7, 0, 
					12, 0, 3, 10, 22, 5, 0, 11, 0, 2, 129, 251, 129, 248, 1, 129, 
					248, 0, 6, 27, 2, 1, 2, 1, 0, 3, 3, 10, 20, 6, 0, 6, 
					1, 3, 10, 21, 7, 0, 12, 0, 3, 10, 22, 5, 0, 11, 0, 2, 
					129, 251, 129, 248, 1, 129, 248, 0, 6, 27, 2, 1, 2, 1, 2, 3, 
					3, 10, 20, 6, 0, 6, 1, 3, 10, 21, 7, 0, 12, 0, 3, 10, 
					22, 5, 0, 11, 0, 2, 129, 251, 129, 248, 1, 129, 248, 0, 6, 27, 
					2, 2, 0, 1, 0, 3, 3, 10, 20, 6, 0, 6, 1, 3, 10, 21, 
					7, 0, 12, 0, 3, 10, 22, 5, 0, 11, 0, 2, 129, 251, 129, 248, 
					1, 129, 248, 0, 6, 27, 2, 2, 0, 1, 2, 3, 3, 10, 20, 6, 
					0, 6, 1, 3, 10, 21, 7, 0, 12, 0, 3, 10, 22, 5, 0, 11, 
					0, 2, 129, 251, 129, 248, 1, 129, 248, 0, 6, 27, 2, 2, 2, 1, 
					0, 3, 3, 10, 20, 6, 0, 6, 1, 3, 10, 21, 7, 0, 12, 0, 
					3, 10, 22, 5, 0, 11, 0, 2, 129, 251, 129, 248, 1, 129, 248, 0, 
					6, 27, 2, 2, 2, 1, 2, 3, 3, 10, 20, 6, 0, 6, 1, 3, 
					10, 21, 7, 0, 12, 0, 3, 10, 22, 5, 0, 11, 0, 2, 129, 251, 
					129, 248, 1, 129, 248, 0, 5, 29, 2, 0, 0, 0, 2, 3, 10, 20, 
					6, 0, 6, 1, 3, 10, 24, 7, 0, 9, 1, 2, 129, 248, 129, 251, 
					0, 0, 5, 29, 2, 0, 1, 0, 2, 3, 10, 20, 6, 0, 6, 1, 
					3, 10, 24, 7, 0, 9, 1, 2, 129, 248, 129, 251, 0, 0, 5, 29, 
					2, 0, 2, 0, 2, 3, 10, 20, 6, 0, 6, 1, 3, 10, 24, 7, 
					0, 9, 1, 2, 129, 248, 129, 251, 0, 0, 5, 29, 2, 2, 0, 0, 
					2, 3, 10, 20, 6, 0, 6, 1, 3, 10, 24, 7, 0, 9, 1, 2, 
					129, 248, 129, 251, 0, 0, 5, 29, 2, 2, 1, 0, 2, 3, 10, 20, 
					6, 0, 6, 1, 3, 10, 24, 7, 0, 9, 1, 2, 129, 248, 129, 251, 
					0, 0, 5, 29, 2, 2, 2, 0, 2, 3, 10, 20, 6, 0, 6, 1, 
					3, 10, 24, 7, 0, 9, 1, 2, 129, 248, 129, 251, 0, 0, 5, 29, 
					2, 0, 0, 0, 2, 3, 10, 20, 6, 0, 6, 1, 3, 10, 24, 7, 
					0, 9, 1, 2, 129, 251, 129, 248, 0, 0, 5, 29, 2, 0, 2, 0, 
					2, 3, 10, 20, 6, 0, 6, 1, 3, 10, 24, 7, 0, 9, 1, 2, 
					129, 251, 129, 248, 0, 0, 5, 29, 2, 1, 0, 0, 2, 3, 10, 20, 
					6, 0, 6, 1, 3, 10, 24, 7, 0, 9, 1, 2, 129, 251, 129, 248, 
					0, 0, 5, 29, 2, 1, 2, 0, 2, 3, 10, 20, 6, 0, 6, 1, 
					3, 10, 24, 7, 0, 9, 1, 2, 129, 251, 129, 248, 0, 0, 5, 29, 
					2, 2, 0, 0, 2, 3, 10, 20, 6, 0, 6, 1, 3, 10, 24, 7, 
					0, 9, 1, 2, 129, 251, 129, 248, 0, 0, 5, 29, 2, 2, 2, 0, 
					2, 3, 10, 20, 6, 0, 6, 1, 3, 10, 24, 7, 0, 9, 1, 2, 
					129, 251, 129, 248, 0, 0, 5, 29, 2, 6, 0, 0, 2, 3, 10, 20, 
					6, 1, 6, 0, 3, 10, 24, 8, 0, 9, 1, 2, 0, 129, 251, 0, 
					0, 5, 29, 2, 6, 1, 0, 2, 3, 10, 20, 6, 1, 6, 0, 3, 
					10, 24, 8, 0, 9, 1, 2, 0, 129, 251, 0, 0, 5, 29, 2, 6, 
					2, 0, 2, 3, 10, 20, 6, 1, 6, 0, 3, 10, 24, 8, 0, 9, 
					1, 2, 0, 129, 251, 0, 0, 5, 29, 2, 11, 0, 0, 2, 3, 10, 
					20, 6, 1, 6, 0, 3, 10, 24, 8, 0, 9, 1, 2, 0, 129, 251, 
					0, 0, 5, 29, 2, 11, 1, 0, 2, 3, 10, 20, 6, 1, 6, 0, 
					3, 10, 24, 8, 0, 9, 1, 2, 0, 129, 251, 0, 0, 5, 29, 2, 
					11, 2, 0, 2, 3, 10, 20, 6, 1, 6, 0, 3, 10, 24, 8, 0, 
					9, 1, 2, 0, 129, 251, 0, 0, 5, 29, 2, 0, 6, 0, 2, 3, 
					10, 20, 6, 0, 6, 1, 3, 10, 24, 7, 0, 9, 1, 2, 129, 251, 
					0, 0, 0, 5, 29, 2, 0, 11, 0, 2, 3, 10, 20, 6, 0, 6, 
					1, 3, 10, 24, 7, 0, 9, 1, 2, 129, 251, 0, 0, 0, 5, 29, 
					2, 1, 6, 0, 2, 3, 10, 20, 6, 0, 6, 1, 3, 10, 24, 7, 
					0, 9, 1, 2, 129, 251, 0, 0, 0, 5, 29, 2, 1, 11, 0, 2, 
					3, 10, 20, 6, 0, 6, 1, 3, 10, 24, 7, 0, 9, 1, 2, 129, 
					251, 0, 0, 0, 5, 29, 2, 2, 6, 0, 2, 3, 10, 20, 6, 0, 
					6, 1, 3, 10, 24, 7, 0, 9, 1, 2, 129, 251, 0, 0, 0, 5, 
					29, 2, 2, 11, 0, 2, 3, 10, 20, 6, 0, 6, 1, 3, 10, 24, 
					7, 0, 9, 1, 2, 129, 251, 0, 0, 0, 3, 28, 0, 0, 1, 2, 
					10, 23, 9, 0, 2, 129, 251, 129, 251, 1, 129, 251, 0, 3, 18, 0, 
					0, 1, 1, 10, 26, 0, 0, 0, 4, 18, 1, 0, 0, 1, 2, 10, 
					27, 6, 0, 0, 0, 0, 4, 18, 1, 1, 0, 1, 2, 10, 27, 6, 
					0, 0, 0, 0, 4, 18, 1, 2, 0, 1, 2, 10, 27, 6, 0, 0, 
					0, 0, 4, 18, 1, 6, 0, 1, 2, 10, 27, 6, 0, 0, 0, 0, 
					4, 18, 1, 11, 0, 1, 2, 10, 27, 6, 0, 0, 0, 0, 4, 18, 
					1, 0, 0, 1, 2, 10, 28, 6, 0, 0, 0, 0, 4, 18, 1, 1, 
					0, 1, 2, 10, 28, 6, 0, 0, 0, 0, 4, 18, 1, 2, 0, 1, 
					2, 10, 28, 6, 0, 0, 0, 0, 4, 18, 1, 6, 0, 1, 2, 10, 
					28, 6, 0, 0, 0, 0, 4, 18, 1, 11, 0, 1, 2, 10, 28, 6, 
					0, 0, 0, 0, 
				},
			};

			target.x86.x86_Assembler.init_sysv();
			target.x86.x86_Assembler.init_cc_map();
			target.x86.x86_Assembler.init_ret_sysv();
			target.x86.x86_Assembler.init_retcc_map();
			target.x86.x86_Assembler.init_cc_caller_preserves_map();
			target.x86.x86_Assembler.init_cc_callee_preserves_map();
			var x86 = new x86.x86_Assembler();
			x86.name = "x86";
			x86.ptype = ir.Opcode.ct_int32;
			x86.instrs = x86_instrs;
			x86.regs = new Target.Reg[12];
			x86.regs[0] = new Target.Reg { name = "stack", id = 0, type = 2, size = 0, mask = 1 };
			x86.r_stack = x86.regs[0];
			x86.regs[1] = new Target.Reg { name = "contents", id = 1, type = 3, size = 0, mask = 2 };
			x86.r_contents = x86.regs[1];
			x86.regs[2] = new Target.Reg { name = "eip", id = 2, type = 0, size = 32, mask = 4 };
			x86.r_eip = x86.regs[2];
			x86.regs[3] = new Target.Reg { name = "eax", id = 3, type = 0, size = 32, mask = 8 };
			x86.r_eax = x86.regs[3];
			x86.regs[4] = new Target.Reg { name = "ebx", id = 4, type = 0, size = 32, mask = 16 };
			x86.r_ebx = x86.regs[4];
			x86.regs[5] = new Target.Reg { name = "ecx", id = 5, type = 0, size = 32, mask = 32 };
			x86.r_ecx = x86.regs[5];
			x86.regs[6] = new Target.Reg { name = "edx", id = 6, type = 0, size = 32, mask = 64 };
			x86.r_edx = x86.regs[6];
			x86.regs[7] = new Target.Reg { name = "edi", id = 7, type = 0, size = 32, mask = 128 };
			x86.r_edi = x86.regs[7];
			x86.regs[8] = new Target.Reg { name = "esi", id = 8, type = 0, size = 32, mask = 256 };
			x86.r_esi = x86.regs[8];
			x86.regs[9] = new Target.Reg { name = "esp", id = 9, type = 0, size = 32, mask = 512 };
			x86.r_esp = x86.regs[9];
			x86.regs[10] = new Target.Reg { name = "ebp", id = 10, type = 0, size = 32, mask = 1024 };
			x86.r_ebp = x86.regs[10];
			x86.regs[11] = new Target.Reg { name = "eaxedx", id = 11, type = 4, size = 32, mask = 72 };
			x86.r_eaxedx = x86.regs[11];
			targets["x86"] = x86;
		}
	}
}

namespace libtysila4.target.x86
{
	public partial class x86_Assembler
	{
		public Target.Reg r_stack;
		public Target.Reg r_contents;
		public Target.Reg r_eip;
		public Target.Reg r_eax;
		public Target.Reg r_ebx;
		public Target.Reg r_ecx;
		public Target.Reg r_edx;
		public Target.Reg r_edi;
		public Target.Reg r_esi;
		public Target.Reg r_esp;
		public Target.Reg r_ebp;
		public Target.Reg r_eaxedx;
	}
}

